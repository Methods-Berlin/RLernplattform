# Zur R-Lernplattform Beitragen

Dieses Repository enthält alle Dateien, die für die Erstellung der R-Lernplattform notwendig sind.
Die Webseite ist als [Quarto Book](https://quarto.org/docs/books/) Projekt angelegt und kann beliebig erweitert und überarbeitet werden.

## Was finde ich im Projekt?

Die wichtigsten Dokumente sind die Quarto Markdown Dateien. Diese enden mit .qmd und in ihnen sind die 
tatsächlichen Inhalte der Website gespeichert. Beispielsweise findest Du in "Installation.qmd"
die Infos zur Installation von R und RStudio. Im Dokument "Einfuehrung_in_R.qmd" befindet sich   
dann die Einführung in R.

**Wichtig**: Die .qmd - Dateien landen **nicht** automatisch auf der Webseite! Damit 
das Thema, das in der .qmd Datei behandelt wird, auch auf der Webseite landet, müssen
wir erst die _quarto.yml Datei öffnen. Dort finden wir beispielsweise
folgende Auflistung:

```
book:
  title: "R Lernplattform"
  author: "Methods Group Berlin"
  chapters:
    - part: "R und RStudio"
      chapters:
        - index.qmd
        - Installation.qmd
        - Einfuehrung_in_R.qmd
        - Einfuehrung_in_RStudio.qmd
        - Pakete.qmd
        - Daten-importieren.qmd
        - Fehlermeldungen.qmd
        - Datenvorbereitung.qmd
        - Fehlende-Werte.qmd
        - Wide-and-Long-Format.qmd
        - Grafiken.qmd
        - Markdown.qmd
    - part: "Spezifische Themen"
      chapters:
        - Voraussetzungspruefung.qmd
        - Outputs-ALM-FAQ.qmd
        - Git.qmd
    - part: "Projekt-Dokumentation"
      chapters:
        - Interne-Dokumentation.qmd
        - lineare-regression.qmd
```
Jede qmd - Datei, die nachher tatsächlich auf der Webseite erscheinen soll,
muss hier aufgeführt werden. **Achtung**: Die Einrückungen sind hier sehr wichtig, sonst funktioniert das Dokument nicht. Mehr Infos gibt es [hier](https://quarto.org/docs/books/book-structure.html).

Im Ordner "figures" befinden sich alle Bilder, die in der Webseite eingebunden sind. Beispielsweise befinden 
sich im Unterornder Daten-importieren/Bilder alle Bilder des Themas Daten importieren.

Im Ordner "data" befinden sich alle Datensätze, die zur Erstellung der Webseite notwendig sind. Diese werden 
in den Beispiel-Analysen verwendet (z.B. um das Einlesen von Datensätzen zu veanschaulichen).

Die restlichen Dateien sind notwendig für Quarto. Den größten Teil hiervon können wir ignorieren. Für uns 
(manchmal) relevant sind hier eigentlich nur "style.scss" und "DESCRIPTION". In "style.scss" wird das Aussehen der 
Webseite definiert. Diese Datei ist aktuell einfach von der alten Webseite übernommen, was dazu führt, dass der
bisherige Stil beibehalten wird. In "DESCRIPTION" geben wir (unter anderem) an, welche R Pakete wir 
in den einzelnen .qmd Dateien nutzen. Wenn wir beispielsweise lavaan nutzen wollen, müssen wir hier lavaan zu
den Paketen hinzufügen (siehe unten). Wenn wir das vergessen, kommt es zu Fehlern beim erstellen der Webseite!

## Themen bearbeiten

Themen können entweder direkt auf GitHub bearbeitet werden oder lokal auf dem eigenen Rechner. Wenn Du 
Themen auf Deinem Rechner bearbeiten möchtest, musst Du Dich mit git und GitHub auskennen. Im Folgenden 
werden wir uns auf die Bearbeitung direkt in GitHub konzentrieren. 

Angenommen Dir fällt ein Fehler in der Einführung in R auf. Um den Fehler zu beheben, öffne das Dokument 
"Einfuehrung_in_R.qmd" in GitHub. 

![](figures/documentation/open_qmd.png)

Anschließend kannst Du die Datei bearbeiten, indem Du auf den Stift klickst:

![](figures/documentation/change_qmd.png)

Du kannst nun das Dokument verändern. Wenn Du alle Veränderungen vorgenommen hast, dann klicke auf commit (scrolle nach ganz unten).

![](figures/documentation/commit_qmd.png)

Die Veränderungen sind nun gespeichert! **Wichtig**: Die Webseite wird nicht automatisch aktualisiert. 
Hier ist zur Zeit noch etwas Handarbeit erfordert. Das ist eine bewusste Entscheidung, um sicher zu stellen,
dass keine unfertigen Seiten aus Versehen online gehen.

### Code hinzufügen

Wenn man Code hinzufügen möchte, funktioniert das identisch wie in RMarkdown also, z.B. so:
```{r}
#| eval: false
modell <- lm(noten ~ stunden)
summary(modell) # Anzeigen der Modellparameter
```
Wir können mit zusätzlichen Code chunk options festlegen, ob der Code z.B. ausgeführt (eval=TRUE oder eval=FALSE) oder überhaupt angezeigt (echo=TRUE oder echo=FALSE) werden soll. Im obigen Fall haben wir keine Variablen `noten` und `stunden`. Daher kann der Code nicht ausgeführt werden; sonst kommt es zu einem Fehler. Deshalb setzen wir `eval=FALSE`. Mehr infos gibt es [hier](https://bookdown.org/yihui/rmarkdown/r-code.html).

### Daten hinzufügen

Wenn Du einen Datensatz für Deine RMarkdown-Datei brauchst, der nicht in R oder
einem Paket enthalten ist, dann speichere diesen im Ordner "data". Anschließend
kannst Du ihn folgendermaßen in Deiner RMarkdown Datei einlesen: 
```{r}
#| eval: false
mein_datensatz <- read.csv("data/mein_datensatz.csv")
```

### Bilder hinzufügen

Wenn Du Bilder für Deine RMarkdown-Datei brauchst, dann speichere diese 
im Ordner "figures". Anschließend kannst Du diese beispielsweise folgendermaßen
nutzen:

```
![](figures/mein_thema/mein_bild.png)
```

Eventuell musst du auch hierfür auch einen neuen Ordner erstellen (hier: den Ordner mein_thema). 
Wenn Du diesen online in GitHub erstellen willst, dann musst Du aktuell folgendermaßen vorgehen:

1. Gehe auf "create new file" oben rechts:

![](figures/documentation/create_new_file.png)

2. Schreibe den Pfad "mein_thema" in den Dateinamen:

![](figures/documentation/add_folder.png)

3. Füge eine backslash "/" hinzu. Dann wird GitHub einen Ordner erstellen:

![](figures/documentation/add_folder_2.png)

4. Weil GitHub uns nicht erlaubt, einfach nur den Ordner zu commiten, müssen wir 
zudem eine neue Datei erstellen. Am besten schreibt man dafür einfach irgendwas in den File, den Github schon aufmacht. Ich nenne diese beispielsweise einfach temp.txt:

![](figures/documentation/add_folder_3.png)

Anschließend können wir auf Commit klicken und haben nun einen neuen Ordner. Unsere Bilder
können wir über "Upload files" einfach von unserem PC hochladen. Oder per Drag & Drop einfügen.

![](figures/documentation/upload_file.png)

### Links hinzufügen

Wenn Du intern auf ein anderes Thema referenzieren möchtest, kannst Du einen
Link einfügen. Dies geht mit:

```
[text, den die Leser:innen sehen](Name_der_qmd_Datei.qmd)
```

Beispielsweise führt folgender Link zur [Einführung in R](Einfuehrung_in_R.qmd).
Als Rohtext steht hier:

```
Beispielsweise führt folgender Link zur [Einführung in R](Einfuehrung_in_R.qmd).
```
Für Links zu Subkapitel, können wir einen Hashtag nutzen:
`[about](about.qmd#section)`

### Paket hinzufügen

Wenn Dein neues Thema auch ein neues R-Paket benötigt, dann musst Du dieses
im Dokument `DESCRIPTION` zu `Imports:` hinzufügen (so wie beispielsweise dplyr).

> **Wichtig**: Wenn wir ein R Paket verwenden und dieses *nicht* zur DESCRIPTION hinzufügen,
dann kann die Webseite nicht erstellt werden! Die Webseite wird von GitHub erstellt und dafür
muss GitHub wissen, welche Pakete installiert werden müssen.

Wenn wir die Webseite auf unserem eigenen Rechner erstellen wollen, können wir wie
im Kapitel @sec-introduction beschrieben vorgehen.

### HTML tags

Markdown erlaubt es, html-tags zu verwenden, um die Formatierung des Textes weiter
anzupassen. Beispielsweise können wir so die Textfarbe und die Schriftgröße
anpassen. Da dies jedoch schnell zu relativ unübersichtlichen Dokumenten führt,
haben wir uns entschieden, die Nutzung von html-tags einzuschränken. Das soll es
auch ermöglichen, das Anpassen und Erweitern bestehender Themen einfacher zu gestalten.
Folgende html-tags dürfen genutzt werden:
\

**Aufklappbares Textelement**

`<details><summary></summary></details>`: Erlaubt das Erstellen aufklappbarer Textelemente.

<details><summary>Dieser Text wird immer angezeigt</summary>
Dieser Text wir nur angezeigt, wenn die Textsektion "aufgeklappt" wird.
</details>

\
**Side-Note** 

`<aside></aside>`: Erlaubt das Erstellen von side-notes.

<aside>
Dies ist ein Beispiel für ein aside
</aside>

\
**Wörter referenzieren**

`<a id="wichtiges Wort"> Wichtiges Wort </a>`: Erlaubt einzelne Wörter wie Überschriften zu referenzieren

<a id="wichtiges Wort"> *Wichtiges Wort* </a>
\
\
Wenn man [hier](#wichtiges Wort) klickt, kann man jetzt per Link zurück zu dem wichtigen Wort (und z.B. der Definition) springen.

\
**Tasten hervorheben**

`<kbd>Taste</kbd>`: Erlaubt es bei Kurzbefehlen die Tasten hervorzuheben. Beispiel: "So kann man bei einem Mac mit <kbd>cmd</kbd> + <kbd>C</kbd> markierten Text kopieren."

\
**Farbiger Text**

`<span style="color:orange"></span>`: Erlaubt die farbliche Markierung von Text

<span style="color:orange"> Dieser Text ist orange </span> \
Anstatt orange können andere Farben eingesetzt werden. Manche Farben können als englisches Wort eingesetzt werden, andere müssen als html-Code eingesetzt werden (siehe [hier](https://htmlcolors.com/)).
\

**Textformatierung in knitr Tabellen**

In R Tabellen, die mit knitr erstellt wurden, funktioniert Markdown nicht (d.h. man kann z.B. nicht mit \*** fett markieren und einen Exponenten nicht mit \*^ erstellen). Daher müssen hier html-Befehle genutzt werden. \
Einige Beispiele:

bold: <strong> fett </strong> \
italic: <em> kursiv </em> \
exponent: x<sup>2</sup> \
Index (subscript): y<sub>1</sub> \
\

**html-Tabellen**

Wenn man Bilder oder mehrere Formeln in einer Tabelle darstellen möchte, kann es sinnvoll sein, die Tabelle komplett in hmtl Code zu erstellen. Dafür ist in der scss-Datei eine "class" definiert, die r-table heißt. Damit kann man Tabellen erstellen, die genauso aussehen, wie die von r automatisch erstellten. html-Tabellen sind nach Zeilen sortiert `(<tr>)`, in jeder Zeile kann mit `<th>` markiert werden, was eine Überschrift sein soll. Am einfachsten ist es, wenn man die untenstehende Tabelle kopiert und die Inhalte entsprechend einfüllt. Innerhalb der html-Tabelle können Bilder wie gewohnt eingefügt werden. Die Formeln müssen zwischen zwei Dollarzeichen stehen (z.B. `$h^2$`).
\

<table class="r-table">
    <tr>
        <th></th>
        <th>Überschrift Spalte 1</th>
        <th>Überschrift Spalte 2</th>
    </tr>
    <tr>
        <th>Überschrift Zeile 1</th>
        <td>Inhalt</td>
        <td>Inhalt</td>
    </tr>
    <tr>
        <th>Überschrift Zeile 2</th>
        <td>Inhalt</td>
        <td>Inhalt</td>
    </tr>
</table> 



## Neues Thema erstellen

Es gibt mehrere Wege, ein neues Thema zu erstellen. Wir können, wie oben beschrieben,
eine neue Datei direkt in GitHub erstellen.

![](figures/documentation/create_new_file.png)

Dieser können wir nun beispielsweise den Namen "Mein-neues-Thema.qmd" geben und
sie direkt in GitHub bearbeiten. Wenn wir dies tun, können wir aber den R Code nicht 
ausführen; das geschieht erst, wenn die Webseite erstellt wird.

Ein einfacherer Web ist folgender:

1. Wir erstellen auf unserem Computer in RStudio eine neue Quarto Datei und nennen diese 
"Mein-neues-Thema.qmd".
2. Wir entfernen den gesamten Inhalt der Datei und fangen direkt mit einer Überschrift an 
(wichtig: es muss eine Überschrift mit nur einem Hashtag sein; siehe beispielsweise Zeile 1
in https://github.com/Methods-Berlin/RLernplattform/blob/main/Pakete.qmd).
3. Jetzt können wir wie gewohnt unsere Inhalte in die Quarto Datei schreiben und den Code
auch lokal laufen lassen.

Wenn wir fertig mit dem Erstellen der neuen Datei sind, können wir sie direkt auf GitHub
hochladen:

![](figures/documentation/upload_file.png)

Unser neues Thema wurde nun hinzugefügt!

## Webseite erstellen

### Online-Version erstellen

Die Online-Version können wir updaten, indem wir [hier](https://github.com/Methods-Berlin/RLernplattform/actions/workflows/create_quarto_website.yml) auf run workflow drücken:

![](figures/documentation/create_website.png)

Die Webseite wird nun automatisch erstellt.

### Offline-Version erstellen

Wir können aber eine offline-Version 
erstellen, die wir dann herunterlagen und auf unserem Computer anschauen können.
Hierfür werden GitHub Actions genutzt. 

> Hinweis: Wir haben nur eine begrenzte Rechenkapazität auf GitHub. Bitte erstelle
die Webseite nur dann neu, wenn Du alle Änderungen vorgenommen hast, die Du vornehmen
wolltest.

Das Vorgehen ist aktuell:

1. Klicke auf Actions

![](figures/documentation/actions.png)

2. Klicke auf create_book

![](figures/documentation/create_book_1.png)

3. Klicke auf Run workflow

![](figures/documentation/create_book_2.png)

4. Wähle Run workflow

![](figures/documentation/create_book_3.png)

Das Bookdown Projekt wird nun in eine Webseite übersetzt. Diese ist allerdings nicht online!

Um die Webseite herunter zu laden, ist das Vorgehen:

1. Klicke auf Actions

![](figures/documentation/actions.png)

2. Klicke auf den neuesten Durchgang der create_book Action

![](figures/documentation/create_book_4.png)

3. Scrolle ganz nach unten. Dort findest Du den Ordner docs unter Artefacts

![](figures/documentation/create_book_5.png)

Lade die Datei herunter und entpacke sie auf Deinem Computer. 

![](figures/documentation/create_book_6.png)

Im Ordner wirst Du unter 
anderem mehrere .html Dateien finden. Öffne eine beliebige dieser Dateien mit Deinem 
Browser, um die lokale Version der Webseite anzuzeigen.

![](figures/documentation/create_book_7.png)

### Fehler beheben

Es kommt immer wieder vor, dass beim erstellen der Webseite Fehler auftreten. Diese sehen in RStudio beispielsweise so aus: 

![](figures/documentation/fehler_1.png)

Wir sehen hier auf der rechten Seite den Hinweis:

![](figures/documentation/fehler_2.png)

Dieser Fehler sagt uns, dass wir im Dokument `_main.Rmd` in Zeile 11731-11733 nach einem Fehler ausschau halten
müssen. Noch spezifischer sagt uns der Fehler, dass es das Objekt "noten" nicht gibt. Wenn wir das Dokument `_main.Rmd`
öffnen, finden wir dort in den angegebenen Zeilen:
![](figures/documentation/fehler_3.png)
Dieser Teil des Dokuments `_main.Rmd` kommt aus dem Dokument `15-Interne-Dokumentation.Rmd`. Schauen wir dort noch mal 
genauer nach, dann sehen wir, dass die Variablen `noten` und `stunden` gar nicht erstellt wurden und deshalb der Code
nicht funktionieren kann. Wir können das Problem lösen, indem wir `eval=FALSE` hinzufügen.

### Alle Dependencies installieren {#sec-dependencies}

Solltest Du nicht alle Pakete installiert haben, die auf der Webseite genutzt werden,
kannst Du entweder die Datei `DESCRIPTION` öffnen und alle dort aufgeführten Pakete 
installieren oder Du öffnest die Datei `RLernplattform.Rproj` in RStudio und führst
folgenden Code aus:
```{r}
#| eval: false
if(!require("devtools"))
  install.packages("devtools")
library("devtools")
devtools::install_deps()
```


