# RStudio

In diesem Abschnitt schauen wir uns die Benutzeroberfläche der Entwicklungsumgebung RStudio an.

Beim ersten Öffnen sieht RStudio wie folgt aus:

```{r}
#| out.width: 700px
#| fig.align: center
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/RStudio 1.png")
```

Wir wollen nun ein neues R-Skript öffnen, in dem wir Code schreiben können. Dazu klicken wir oben links in der Titelleiste auf File > New File > R Script. Alternativ können wir darunter auf <img src="figures/Einführung/Bilder/RStudio/Button.png" style=" width:4%" /> klicken und wählen R Script aus.

Im linken oberen Viertel öffnet sich nun ein neues Fenster mit einem leeren R-Skript.

```{r}
#| out.width: 700px
#| fig.align: center
#| eval: false
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/RStudio 2.png")
```

Nun gliedert sich die Entwicklungsumgebung <span class="r">RStudio</span> in **vier verschiedene Bereiche**:\

In das <span class="r script">**Skript**</span> können wir unseren Code schreiben. Wird der Code ausgeführt, erscheint er zusammen mit dem Ergebnis in der <span class="r" style="color:#0533FF;">**Konsole**</span>. Das <span class="r env">**Environment**</span> gibt uns einen Überblick über aktuell geladene Objekte. Eine Übersicht über verschiedene Pakete mit Zusatzinformationen finden wir unter <span class="r" style="color:#669C35;">**Packages**</span> und Informationen zu R und zu bestimmten Funktionen finden wir unter <span class="r" style="color:#669C35;">**Help**</span>.


```{r}
#| out.width: 700px
#| fig.align: center
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/RStudio Aufteilung Farbe.png")
```

<aside>\
\
Die Größe der Fenster lässt sich an den Kanten oder an den Icons in der oberen rechten Ecke verändern. Die Aufteilung der Fenster kann über Tools > Global Options... > Pane Layout angepasst werden.</aside>

Im Folgenden werfen wir einen genaueren Blick auf das <span class="r script">**R-Skript**</span> und die <span class="r" style="color:#0533FF;">**Konsole**</span>.

## R-Skript

Hier schreiben wir Code und Kommentare.

```{r}
#| out.width: 700px
#| fig.align: center
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/skript.png")
```

Eine Zeile mit R-Code kann entweder mit dem Tastaturkürzeln **strg** + **enter**\ (Windows) oder **cmd** + **enter**\ (macOS) ausgeführt werden. Alternativ können wir auch den Cursor in die gewünschte Zeile setzen und auf den Run-Knopf klicken.

Mehrere Zeile Code können ausgeführt werden, in dem wir sie markieren und über das jeweilige Tastenkürzel benutzen oder Run klicken.

```{r}
#| out.width: 700px
#| fig.align: center
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/run.png")
```

Alle Zeichen, die in einer Zeile nach einem '#' erscheinen, sind Kommentare. Kommentare sind nützlich, um besser zu verstehen, was im Skript passiert. Vor allem in längeren Skripten sind Kommentare besonders hilfreich, wenn man nach längerer Zeit zu einem Skript zurückkehrt oder seine Skripte mit anderen Personen teilen möchte.

<aside>**Skript Speichern**:\
Win: **Strg** + **S**\
Mac: **cmd** + **S**</aside>


## Konsole

Ausgeführter R-Code wird mitsamt Ergebnis in der Konsole angezeigt. Wir können in der Konsole auch direkt R-Code eingeben und ausführen lassen.

Es kommt vor, dass R noch auf eine Eingabe von uns wartet (z.B. weil wir die schließende Klammer einer Funktion vergessen haben). In diesem Fall wird in der Konsole ein `+` angezeigt. Hängen wir fest, können wir die Eingabe mit der **esc**-Taste abbrechen.

```{r}
#| out.width: 700px
#| fig.align: center
#| echo: false
knitr::include_graphics("figures/Einführung/Bilder/RStudio/Konsole.png")
```
Wir bekommen in der Konsole einen Hinweis, wenn wir eine **eindeutig unvollständige Funktion**, d.h. wenn wir *nur* am Ende einer Funktion die schließende Klammer vergessen haben, ausführen wollen. Dann wird uns in der Konsole in der nachfolgenden Zeile ein `+` ausgegeben.

Der Inhalt der Konsole wird nach jedem Schließen des Programms gelöscht und kann nicht ohne weiteres gespeichert werden. Deswegen ist es wichtig, die eigene Arbeit in Skripten zu speichern.
