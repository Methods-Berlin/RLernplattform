# Pakete

Im Thema [Funktionen](Funktionen.qmd) hatten wir gelernt, dass wir uns Pakete
wie Rezeptbücher vorstellen können. In diesen finden wir Rezepte wie "Berechne einen
Mittelwert" oder "Erstelle eine Grafik". Da R so beliebt ist, gibt es eine mittlerweile
[tausende solcher Rezepbücher](https://cran.r-project.org/web/packages/available_packages_by_name.html). 

Wenn wir R neu installieren, haben wir nur sehr wenige Pakete. Weitere Pakete zu
installieren ist jedoch meist sehr einfach.

## Pakete installieren

Die einfachste Möglichkeit, Pakete zu installieren, finden wir in RStudio. Gehe hierfür auf "Packages" und klicke "Install".
Es öffnet sich ein Fenster, in das Du den Namen des Pakets eingibst,
das Du installieren möchtest. Klicke dann auf "Install". Installiere nun das 
Paket **praise**.

<details>
<summary>Video anzeigen</summary>

![](figures/Pakete/Bilder/install_packages.gif)

</details>

Alternativ kannst Du direkt in der Konsole den Befehl `install.packages("praise")`
eingeben.

## Pakete laden

Passend zu unserer Rezeptbuch-Analogie, befindet sich das Paket
**praise** nun in unserer Bibliothek (library). Möchten wir nun eine Funktion (ein Rezept)
aus dem Paket **praise** nutzen, gehen wir in unsere library
und holen das Paket **praise**. In R geschieht dies mit:

```{r}
library(praise)
```

> **Wichtig**: Wenn wir RStudio schließen, werden automatisch alle
Pakete zurück in die library gelegt. Wir müssen also jedes mal `library(praise)` ausführen, wenn wir eine Analyse mit den Funktionen aus **praise** durchführen wollen.

Lade nun das Paket **praise** und führe den Befehl `praise()` aus (der Befehl heißt
genauso wie das Paket).

<details>
<summary>Lösung anzeigen</summary>

```{r}
library(praise)
praise()
```

</details>

Schließe nun RStudio und öffne es erneut. Führe danach `praise()` aus, ohne vorher
`library(praise)` zu nutzen.

```{r,include=FALSE}
detach("package:praise", unload = TRUE)
```


<details>
<summary>Lösung anzeigen</summary>

```{r, error=TRUE}
praise()
```
Wir müssen das Paket erst wieder aus der library holen!
```{r}
library(praise)
praise()
```

</details>

## Pakete aktualisieren

Pakete werden ständig verbessert, es kommen neue Funktionen hinzu oder es
werden Fehler behoben. Daher sollten wir ab und an unsere Pakete aktualisieren.

Damit es nicht zu Fehlern kommt, sollten wir vor der Aktualisierung RStudio
schließen und erneut öffnen. 
Das Updaten der Pakete erfolgt über den "Packages"-Reiter in RStudio und wird
in folgendem Video dargestellt:

<details>
<summary>Video anzeigen</summary>

![](figures/Pakete/Bilder/update_packages.gif)

</details>

Alternativ können wir direkt `update.packages()` in die Console eingeben.

**Achtung**: Manchmal fragt R uns, ob wir neuere R-Paket versionen "from sources"
installieren wollen:
```{r, echo = FALSE}
cat("There is a binary version available but the source version is later:
       binary source needs_compliation
praise 1.0.0  1.1.0               TRUE\n")
message("Do you want to install from sources the package which needs compilation  (Yes/no/cancel)?")
```
Long story short: Wir empfehlen hier "no" in die Console einzugeben. Eine 
Installation "from sources" kann recht kompliziert sein und die neuste
Version des Pakets ist meist innerhalb weniger Tage sowieso ohne Installation
"from sources" verfügbar.

<details>
<summary>Video anzeigen</summary>

![](figures/Pakete/Bilder/update_from_source.gif)

</details>

## Fortgeschrittene Themen

### Maskierung

Es kann vorkommen, dass Funktionen aus verschiedenen Paketen die gleiche Bezeichnung haben. 
Beispielsweise gibt es in den Paketen **psych** und in **ggplot2** jeweils eine Funktion mit 
dem Namen `alpha()`. Installiere nun **psych** und **ggplot2** und führe dann folgende
Befehle aus:

```{r}
library(ggplot2)
library(psych)
```
Wir bekommen hier eine Warnung, dass die Funktion `alpha()` aus dem **psych**-Paket die 
`alpha()`-Funktion aus dem Paket **ggplot2** maskiert. Das heißt, wenn wir nun die
Funktion `alpha` aufrufen, wird die aus dem **psych** Paket genutzt. Wollen wir
stattdessen die `alpha()`-Funktion aus dem Paket **ggplot2** nutzen, müssen wir
dies explizit angeben. Dies funktioniert folgendermaßen:
```{r, eval = FALSE}
ggplot2::alpha()
```
Wir geben also `Paketname::Funktion` ein, wodurch R genau weiß, welche Funktion
wir nutzen wollen.

### Pakete von GitHub etc.

Die allermeisten Pakete bekommen wir direkt über R. Manchmal gibt es jedoch auch
Pakete, die nur über GitHub oder GitLab verfügbar sind. Häufig finden wir direkt
auf der GitHub Seite einen Hinweis, wie das Paket installiert werden kann:
![](figures/Pakete/Bilder/install_from_github.png)
Das klappt manchmal, häufig brauchen wir jedoch zusätzliche Werkzeuge, die wir 
vorher installieren müssen (z.B. [RTools](https://cran.r-project.org/bin/windows/Rtools/) unter Windows, [Xcode](https://apps.apple.com/de/app/xcode/id497799835?mt=12) unter macOS oder
[build-essential](https://packages.ubuntu.com/focal/build-essential) unter Linux).
Viel Glück!

