# Data.frames

Im Kapitel [Vektoren](Vektoren.qmd) haben wir festgestellt, dass es häufig sinnvoll sein kann, mehrere Datenpunkte in einer Variable zu speichern. Dort hatten wir folgendes Beispiel verwendet:

```{r}
depression <- c(3, 5, 2, 1, 5, 4, 5, 3, 1, 1)
```

Meistens haben wir jedoch nicht nur eine Variable (hier depression) in unserem Datensatz. Stattdessen finden wir dort häufig dutzende Variablen wir Persönlichkeits-Items, Alter, Geschlecht, Therapierichtung und Therapiedauer.
Diese haben häufig auch noch unterschiedliche Datentypen. Beispielsweise könnte die Therapierichtung als Text gespeichert sein, die Dauer aber als Zahl. Wir könnten nun für jede Variable einen eigenen Vektor erstellen:

```{r}
depression   <- c(3, 5, 2, 1, 5, 4, 5, 3, 1, 1)
alter        <- c(45,64,21,54,19,76,34,45,53,25)
therapieform <- c("KVT", "PD", "PD", "KVT", "KVT", "KVT", "PD", "KVT", "KVT", "PD")
```

Das ist aber auf Dauer extrem aufwendig, weil wir so unseren Datensatz auf zig unterschiedliche Variablen aufgeteilt haben. Data.frames erlauben es uns, alle diese Vektoren in einer einzigen Variable zu speichern:

```{r}
depression_data <- data.frame(
    depression   = c(3, 5, 2, 1, 5, 4, 5, 3, 1, 1),
    alter        = c(45,64,21,54,19,76,34,45,53,25),
    therapieform = c("KVT", "PD", "PD", "KVT", "KVT", "KVT", "PD", "KVT", "KVT", "PD")
)
print(depression_data)
```
Beachte, dass wir hier "=" Zeichen statt der Zuweisungspfeile nutzen! Und vergiss auch die Kommas am Ende der Vektoren nicht.

R hat hier unseren data.fame automatisch als Tabelle angelegt, bei der die Personen in den Zeilen und die Variablen in den Spalten sind. Wir können auf die einzelnen Vektoren im data.frame zugreifen, indem wir das Dollar-Symbol benutzen:

```{r}
depression_data$depression
```

Alternativ können wir auch wieder eckige Klammern verwenden. Allerdings haben wir nun zwei Dimensionen: Zeilen und Spalten. Wir müssen nun also sowohl die Zeile als auch die Spalte angeben, deren Element wir herausgreifen wollen:

```{r}
depression_data[1,3] # ergibt das Element in der ersten Zeile, dritten Spalte
```

Was passiert, wenn Du folgenden Code ausführst?
```{r}
#| eval: false
depression_data[1,]
```

<details>
<summary>Lösung anzeigen</summary>

```{r}
depression_data[1,]
```
Wir bekommen die gesamte erste Zeile!
</details>

Was passiert, wenn Du folgenden Code ausführst?
```{r}
#| eval: false
depression_data[,1]
```

<details>
<summary>Lösung anzeigen</summary>

```{r}
depression_data[,1]
```
Wir bekommen die gesamte erste Spalte!
</details>

Wir können auch wieder logische Operatoren verwenden, um bestimmte Elemente herauszugreifen.
Wenn wir uns beispielsweise nur für Personen interessieren, die eine KVT erhalten, geht dies mit:
```{r}
depression_data[depression_data$therapieform == "KVT",]
```

Versuche nur Personen herauszugreifen, die älter als 35 sind.
<details>
<summary>Lösung anzeigen</summary>

```{r}
depression_data[depression_data$alter > 35,]
```
</details>
