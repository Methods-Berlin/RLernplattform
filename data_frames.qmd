# Data.frames

Sowohl bei [Vektoren](Vektoren.qmd) als auch bei [Matrizen](Matrizen.qmd) haben wir festgestellt, dass wir immer nur einen bestimmten Datentyp (Text **oder** Zahlen) speichern können. 
Meistens haben wir jedoch dutzende Variablen in unserem Datensatz, von denen manche Zahlen sind und andere Text.
Beispielsweise könnte der Y-BOCS Wert als Zahl, die Therapierichtung aber als Text gespeichert sein:

```{r}
ybocs <- matrix(c(3, 4, 2, 0, 2, 0, 3, 2, 1, 1,
                  0, 4, 3, 4, 2, 2, 1, 2, 2, 4,
                  3, 4, 3, 3, 0, 3, 3, 3, 4, 0,
                  1, 3, 3, 0, 1, 3, 2, 0, 0, 3), 
                nrow = 4, 
                ncol = 10, 
                byrow = TRUE)
therapieform <- c("KVT", "PD", "PD", "KVT")
```
In echten Datensätzen hätten wir wahrscheinlich noch sehr viel mehr Variablen.
Daher ist das Vorgehen oben extrem aufwendig, weil wir so unseren Datensatz auf zig unterschiedliche Variablen aufgeteilt würden.

Data.frames erlauben es uns, verschiedene Datentypen in einer einzigen Tabelle zu speichern.
Um einen data.frame zu erstellen, können wir unsere ybocs-Variable nehmen und in
den data.frame - Befehl werfen:

```{r}
ybocs_df <- data.frame(ybocs)
print(ybocs_df)
```
Wir können den Spalten auch etwas sinnvollere Namen geben, indem wir folgenden Code
ausführen:

```{r}
colnames(ybocs_df) <- c("frage 1", "frage 2", "frage 3", "frage 4", "frage 5",
                        "frage 6", "frage 7", "frage 8", "frage 9", "frage 10")
```



Wir können nun neue Variablen hinzufügen, indem wir das Dollar-Symbol nutzen:

```{r}
ybocs_df$therapieform <- therapieform
print(ybocs_df)
```

## Auf Daten eines data.frame zugreifen

Um Daten herauszugreifen, können wir wieder eckige Klammern verwenden. Identisch zu Matrizen haben wir wieder Zeilen und Spalten. Wir müssen nun also sowohl die Zeile als auch die Spalte angeben, deren Element wir herausgreifen wollen:

```{r}
ybocs_df[1,3] # ergibt das Element in der ersten Zeile, dritten Spalte
```

Was passiert, wenn Du folgenden Code ausführst?
```{r}
#| eval: false
ybocs_df[1,]
```

<details>
<summary>Lösung anzeigen</summary>

```{r}
ybocs_df[1,]
```
Wir bekommen die gesamte erste Zeile!
</details>

Was passiert, wenn Du folgenden Code ausführst?
```{r}
#| eval: false
ybocs_df[,1]
```

<details>
<summary>Lösung anzeigen</summary>

```{r}
ybocs_df[,1]
```
Wir bekommen die gesamte erste Spalte!
</details>

Alternativ können wir Spaltennamen nutzen, um ganze Spalten herauszugreifen. Hierfür nutzen
wir wieder das Dollar-Zeichen:

```{r}
ybocs_df$therapieform
```
