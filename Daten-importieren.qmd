# Daten importieren

Wir können in **R** nicht nur selbst Daten erzeugen, sondern selbstverständlich auch externe Dateien unterschiedlichen Typs einlesen. Dabei geschehen in der Regel zwei Dinge: 1) Die Informationen werden ausgelesen und 2) in einem Objekt (oftmals in Form eines Dataframes) gespeichert. 

Im Rahmen dieses Kapitels schauen wir uns an, wie wir Dateien **aus dem Internet herunterladen**, **in unseren Arbeitsordner verschieben** und anschließend **in **R** einlesen. Wir lernen außerdem, wie wir unser **Working Directory setzen** können.

Wir lernen **drei verschiedene Wege zum Einlesen von Dateien** kennen:

```{r}
#| out.width: 700px
#| echo: false
#| column: l-body-outset
knitr::include_graphics("figures/Daten-importieren/Bilder/overview.png")
```

Die ersten beiden Wege nutzen die **grafische Benutzeroberfläche** der Entwicklungsumgebung **RStudio**, letzterer nutzt direkt `Funktionen`.

Exemplarisch schauen wir uns die drei Wege für die Datei <span class="ex">neuro<a href="https://de.wikipedia.org/wiki/CSV_(Dateiformat)" target="_blank">**.csv**</a> an. Wir können mit den vorgestellten Wegen aber auch andere Dateiformate einlesen.

<details><summary>Was ist eine grafische Benutzeroberfläche?</summary><div class ="more">
Die Grafische Benutzeroberfläche, oder auch Benutzungsschnittstelle, wird häufig auch mit GUI (_**G**raphical **U**ser **I**nterface_) abgekürzt. Durch diese kann man mit der Maus auf Symbole und andere Steuerelemente klicken anstatt Funktionen in der Konsole auszuführen (z.B. [Weg 1](#weg-1-environment-import-dataset) und [Weg 2](html#weg-2-files-import-dataset) zum Daten einlesen). 

Die grafische Benutzeroberfläche in der Entwicklungsumgebung <span class ="r">**RStudio** ist viel besser ausgebaut (als die des Basisprogramms **R**), weswegen wir diese auch nutzen wollen.</div></details>

<p style="line-height:10px;"></p>

<details><summary>Was ist das Working Directory?</summary><div class ="more">
Mit dem Working Directory (WD; Arbeitsverzeichnis) legen wir u.a. fest, wo unser aktuelles <span class="r">R-Skript gespeichert wird und wo andere Objekte, die wir aus <span class="r">R exportieren (z.B. Grafiken), standarmäßig (während der aktuellen Sitzung) gespeichert werden. 

Das WD müssen wir (in der Regel) in jeder <span class="r">R-Sitzung erneut festlegen.</div></details>


## Vor dem Einlesen in <span class="r">R

In diesem Abschnitt schauen wir uns an, wie wir **Dateien aus dem Internet herunterladen** <font size="2">(z.B. aus moodle)</font> und **in unseren Arbeitsordner verschieben** können. Wir sollten der Übersichtlichkeit halber für jedes neue Projekt einen neuen Ordner anlegen. 

Die beiden Schritte schauen wir uns jeweils für das [Windows](#windows)- und [Mac](#mac)-Betriebssystem bzw. die Browser Google Chrome und Safari an.

Dieser Abschnitt ist **optional**. Wenn du bereits weißt, wie du Daten herunterlädst und verschiebst, kannst du diesen Abschnitt überspringen.


## Windows

Im nachfolgenden Beispiel wird gezeigt, wie wir unter Benutzung des Browsers **Google Chrome** eine Datei aus einem Moodle-Kurs herunterladen und in unseren Arbeitsordner verschieben.

### Datei herunterladen

Wir begeben uns in den entsprechenden Moodle-Kurs und wählen die Datei mit einem Rechtsklick an, wählen die Option **Link speichern unter…** sowie den gewünschten Zielordner zur Ablage aus.  

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Herunterladen_1.png")
```

Sehr wichtig ist es, sich immer zu merken, in welchem Ordner die heruntergeladene Datei gespeichert wird. Es ist **sinnvoll, die Datei bereits jetzt im Arbeitsordner zu speichern** (in dem wir unser **R**-Skript später speichern möchten). 

In Google Chrome können wir den Zielordner herausfinden, indem wir rechts oben auf die drei Punkte klickt und den Menüpunkt **Downloads** anwählen. Es öffnet sich ein neuer Tab im Browser, in dem wir die Option **In Ordner anzeigen** auswählen können.

### In Arbeitsordner verschieben

Wir wählen die Datei mit einem Rechtsklick im Ordner aus und klicken dann auf die Option **Ausschneiden**. Im Gegensatz zu Kopieren entfernt das Ausschneiden die Datei auch aus dem ursprünglichen Ordner. 

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Herunterladen_Verschieben_1.png")
```

Als nächstes begeben wir uns in unseren Arbeitsordner <font size="2">(ggf. müssen wir diesen vorher noch erstellen)</font>. Wir machen einen Rechtsklick und wählen die Option **Einfügen** aus.

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Herunterladen_Verschieben_2.png")
```

Jetzt befindet sich die Datei in unserem Arbeitsordner und wir können nun <span class="r">RStudio öffnen, um die Datei einzulesen.


## Mac

Im folgenden Beispiel wird gezeigt, wie wir unter Benutzung des Browsers **Safari** eine Datei aus einem Moodle-Kurs herunterladen und in unseren Arbeitsordner verschieben.

### Datei herunterladen

Wir begeben uns in den entsprechenden Moodle-Kurs und öffnen die Datei im Browser. Dann machen wir einen **Rechtsklick** <font size="2">(dabei darf nichts markiert sein)</font> und klicken auf **Seite sichern unter…**. 

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Safari_Seite_sicher_unter.png")
```

In dem Fenster, welches sich dann öffnet, müssen wir bei **Format** noch festlegen, dass wir den **Quelltext der Seite** herunterladen wollen. Wir könnten auch schon unseren Arbeitsordner als Zielordner festlegen.

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Quelltext.png")
```

> *__Achtung__*:  Manchmal werden wir beim Speichern gefragt, ob die **Endung .txt angehängt** werden soll <font size="2">(d.h. ob die Datei als Textformat gespeichert werden soll)</font>. Das sollten wir **verneinen**, da ansonsten unser (.csv-)Dateiformat geändert wird.</font>

Oben rechts im Browser sehen wir einen nach unten zeigenden Pfeil <img src="figures/Daten-importieren/Bilder/Download_Arrow.png" style=" width:5%"/>. 
Wenn wir auf diesen klicken, können wir uns die heruntergeladene Datei im Finder anzeigen lassen. Standardmäßig werden heruntergeladene Dateien im Ordner **Downloads** gespeichert.

### In Arbeitsordner verschieben

Wir machen einen Rechtsklick auf die Datei. Nun öffnet sich ein Menü, in welchem wir **Kopieren** auswählen. 

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Datenfile_aus_Download_Ordner_kopieren.png")
```

Als nächstes begeben wir uns in unseren Arbeitsordner <font size="2">(ggf. müssen wir diesen vorher noch erstellen)</font>. Wir machen einen Rechtsklick und wählen die Option **Objekt einsetzen** aus.

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Datenfile_in_den_Zielordner_kopieren.png")
```

Die Datei ist nun im Arbeitsordner gespeichert; wir können sie nun auch aus dem Download-Ordner löschen. Jetzt öffnen wir <span class="r">RStudio, um die Datei einzulesen.


## Weg 1: Environment > Import Dataset

Eine Variante, Daten in **R** ganz ohne Code zu importieren, ist es, das Icon **Import Dataset** zu nutzen. Dieses finden wir im rechten oberen Panel bei **Environment**.  

```{r}
#| out.width: 700px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_icon_csv_txt_1.png")
```

Nun klicken wir auf **From CSV**. Daraufhin öffnet sich ein Fenster, in dem wir verschiedene Optionen zum Einlesen haben. 

> *__Achtung__*:  In neueren **RStudio**-Versionen gibt es die Optionen **From Text (base)** und **From Text (readr)** (anstatt zusammengefasst **From CSV**). Beides kann genutzt werden, um .csv-Dateien einzulesen. **base** ist ein Standardpaket, welches in **R** von Beginn an vorinstalliert ist. Um **readr** nutzen zu können, müssen wir erst das gleichnamige Paket herunterladen. Die nachfolgend genannten Schritte beziehen sich auf die Benutzung von **From Text (readr)**; das Fenster bei **From Text (base)** sieht auch anders aus.</font>

Nachdem wir eine Option ausgewählt haben, öffnet sich ein Fenster, in welchem wir die gewünschte Datei in unserem Arbeitsordner auswählen können.

Dann öffnet sich ein neues Fenster, welches eine **Vorschau** beinhaltet, die uns zeigt, wie die Datei mit den derzeitig festgelegten Optionen in **R** aussehen würde. Wenn es Probleme gibt <font size="2">(z.B. mit der Interpretation der Trennungszeichen)</font>, sehen wir das sofort an der Darstellung der Daten.

```{r}
#| out.width: 700px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_icon_csv_txt_2.png")
```

Zum Einlesen sind folgende Schritte nötig:

- Anklicken des <span style="color:#FF230C">**Browse**-Buttons. Daraufhin öffnet sich ein Fenster, in welchem wir die Datei auswählen können.
- Überprüfen der <span style="color:#27B965">**Vorschau**, ob die Daten korrekt dargestellt werden. Die häufigsten Probleme bei der Repräsentation der Daten kommen durch die Trennungzeichen (zwischen den einzelnen Datenelementen) zustande. Diese können wir bei **Delimiter** ändern.
- Anschließend drücken des <span style="color:#6DA8DC">**Import**-Buttons.

Wenn die Datei <span class="ex">neuro.csv erfolgreich eingelesen wurde, erscheint das neu erstellte Objekt <span class="ex">neuro <font size="2">(oder welchen anderen Namen wir dem Objekt gegeben haben)</font> im rechten oberen Panel bei **Environment**.

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/environment_neuro.png")
```

<!-- > *__Achtung__*: Das Working Directory müssten wir jetzt noch manuell setzen <font size="2">(z.B. mit [`setwd()`](#working-directory-setzen-1))</font>. -->


## Weg 2: Files > Import Dataset

Schauen wir uns einen weiteren Weg an, mit der Benutzeroberfläche der Entwicklungsumgebung <span class ="r rstud">RStudio Dateien einzulesen. 

<!-- Bevor wir aber die Datei einlesen, werden wir das Working Directory setzen. -->

<!-- ## Working Directory setzen -->

<!-- Wir klicken im rechten unteren Fenster auf **Files** und dann auf **...** . -->

<!-- ```{r, out.width = "700px", echo=FALSE, fig.align='center'} -->
<!-- knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_Directory_1.png") -->
<!-- ``` -->
<!-- <!-- -->
<!-- <i class="fa fa-exclamation-triangle fa-2x"></i> <font size="2">Anstatt über **...** Ordner bzw. Dateien auf unserem Rechner auszuwählen könnten wir auch direkt auf die einzelnen Ordner bzw. Dateien in der Struktur links klicken. Über den Pfad rechts von <img src="figures/Daten-importieren/Bilder/haus.png" style=" width:3%"/> können wir den Ort der Ordner bzw. Dateien auswählen.</font> -->

<!-- Es öffnet sich nun ein kleines Fenster, in dem wir unseren Arbeitsordner anwählen können.  -->

<!-- <!-- -->
<!-- <font size="2">Wir wählen unseren Arbeitsordner an, um ihn als Working Directory festzulegen. Wir könnten auch gleich auf die Datei klicken und diese einlesen (Anleitung folgt weiter unten).</font> -->

<!-- Bestätigen wir die Auswahl mit **OK**, ist neben <img src="figures/Daten-importieren/Bilder/haus.png" style=" width:3%"/> nun der Pfad des ausgewählten Ordners zu sehen. Darunter finden wir alle Dateien, die sich in diesem Ordner befinden.  -->

<!-- ```{r, out.width = "700px", echo=FALSE, fig.align='center'} -->
<!-- knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_Directory_2.png") -->
<!-- ``` -->

<!-- Noch ist unser Ordner nicht als Working Directory festgelegt. Dazu müssen wir auf <img src="figures/Daten-importieren/Bilder/rad.png" style=" width:3%"/> **More** und dann auf **Set as Working Directory** klicken. -->

<!-- ```{r, out.width = "700px", echo=FALSE, fig.align='center'} -->
<!-- knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_Directory_3.png") -->
<!-- ``` -->

<!-- Wenn wir diesen Schritt erfolgreich ausgeführt haben, sollten wir in der **Konsole** den Befehl `setwd()` mit unserem festgelegten Arbeitsverzeichnis sehen. -->

<!-- ```{r, out.width = "400px", echo=FALSE, fig.align='center'} -->
<!-- knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_Directory_4.png") -->
<!-- ``` -->

<!-- ## Datei importieren  -->

Das Vorgehen hier ist weitestgehend analog zu [Weg 1](#weg-1-environment-import-dataset).

Wir klicken auf die Datei <span class="ex">neuro.csv in unserem Arbeitsordner und dann auf die Option **Import Dataset**.  

```{r}
#| out.width: 700px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_1.png")
```

Es öffnet sich (weitestgehend) das gleiche Fenster wie in [Weg 1](#weg-1-environment-import-dataset).

```{r}
#| out.width: 700px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Importieren_manuell_2.png")
```

Wir haben hier mit Hilfe der Vorschau wieder die Möglichkeit vor dem Einlesen zu Überprüfen, ob die Datei von **R** richtig repräsentiert wird. Die meisten Probleme hängen mit den Trennungszeichen zwischen den einzelnen Datenelementen zusammen. Diese Option können wir unter **Delimiter** anpassen. Stimmt die Vorschau mit unseren Erwartungen überein, können wir rechts unten auf **Importieren** klicken.

Im Workspace sollten wir nun den eben eingelesenen Dataframe <span class="ex">neuro finden. 

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/environment_neuro.png")
```


## Weg 3: Manuell Importieren mit `Funktionen`

Auch wenn Möglichkeiten existieren, Dateien mithilfe der Benutzeroberfläche von <span class="r">RStudio einzulesen, ist es ratsam, auch einmal selbst Funktionen zu nutzen. Für die meisten Arbeiten in <span class="r">R nutzen wir nämlich Funktionen.  

<!-- Bevor wir die Datei <span class="ex">neuro.csv einlesen, setzen wir das Working Directory. -->


<!-- ## Working Directory setzen -->

<!-- Mit der Funktion `setwd()` setzt man ein Working Directory in <span class="r">R. Dieser Funktion über geben wir den Pfad zu unserem gewünschten Arbeitsordner in Anführungszeichen <font size="2">(`" "` oder `' '`)</font>.  -->

<!-- Unter <span class="highlight">Windows können wir auf <span class ="keybord">shift drücken und dann einen *Rechtsklick* auf den Ordner machen. Nun öffnet sich ein Menü, in welchem wir *Als Dateipfad kopieren* auswählen. **Wichtig** dabei ist, dass wir noch alle **\\** <font size="2">(backslashes)</font> aus dem kopierten Pfad in */* <font size="2">(forwardslashes)</font> ändern müssen. -->

<!-- Unter <span class="highlight">Mac können wir die Tastaturkürzel <span class ="keybord">alt + <span class ="keybord">cmd + <span class ="keybord">c nutzen, um unseren Ordnerpfad zu kopieren. -->

<!-- Wir führen <span class="code">setwd("<span class="ex">/Ordnerpfad") mit **Run** (im Skript) aus, um unser Working Directory zu setzen. -->

<!-- Mit `getwd()` können wir anschließend überprüfen, ob es geklappt hat. Wir sollten den gerade festgelegten Dateipfad in der Konsole ausgegeben bekommen. -->


<!-- ## Datei einlesen -->

Welche Funktion hierfür angebracht ist, hängt von der Struktur der Datei ab. Nachfolgend schauen wir uns an, welche Funktionen wir für **.csv**, **.txt** und **.dat** nutzen können. 

<!-- Wenn wir das Working Directory gesetzt haben (und sich die Datei die wir einlesen wollen auch in diesem Ordner befindet), brauchen wir nur noch den Namen der Datei (und nicht mehr den gesamten Dateipfad) an die Funktion übergeben. -->
 
```{r}
#| eval: false
# nutzbare Funktionen zum Einlesen von .csv, .txt. und .dat
daten <- read.table("Dateipfad/neuro.csv")
daten <- read.delim("Dateipfad/neuro.csv")
daten <- read.csv("Dateipfad/neuro.csv")
```

<details><summary>Einen Dateipfad kopieren</summary><div class ="more">

Unter <span class="highlight">Windows können wir auf <span class ="keybord">shift drücken und dann einen *Rechtsklick* auf die Datei machen. Nun öffnet sich ein Menü, in welchem wir *Als Dateipfad kopieren* auswählen. **Wichtig** dabei ist, dass wir noch alle **\\** <font size="2">(backslashes)</font> aus dem kopierten Pfad in */* <font size="2">(forwardslashes)</font> ändern müssen.

Unter <span class="highlight">Mac können wir die Tastaturkürzel <span class ="keybord">alt + <span class ="keybord">cmd + <span class ="keybord">c nutzen, um unseren Dateipfad zu kopieren.

</div></details>

Diese drei Funktionen sind sehr ähnlich aufgebaut. Sind haben aber teilweise unterschiedliche Voreinstellungen <font size="2">(sog. *"Defaults"*)</font>. Zum Beispiel nimmt `read.csv()` an, dass einzelne Datenelemente mit Kommata <font size="2">(Default: `sep=","`)</font> getrennt werden. Dafür werden bei `read.table()` standarmäßig Spaltennamen nicht eingelesen <font size="2">(Default: `header=FALSE`)</font>.

> *__Achtung__*:  Alle Funktionsdefinitionen (mit Defaults) finden wir in der <span class="r">R-Dokumentation, die wir im unteren rechten Panel bei **Help** finden. Alternativ können wir sie auch mit der Hilfefunktion `?`, z.B. `?read.table`, öffnen.

In Abhängigkeit der Speicherung der Dateien müssen wir manchmal den Parametern der Funktionen andere Argumente übergeben. Die zwei wichtigsten Parameter sind `header` und `sep`.

- `header` 
   + ob Spaltennamen übernommen werden sollen
   + `TRUE` oder `FALSE` möglich
   + Wenn es Spaltennamen gibt, aber `header = FALSE` festgelegt ist, stehen diese in der ersten Zeile und die Spalten werden alternativ mit `V1`, `V2`, `V3`, ... benannt. 
- `sep`
   + wie (angenommen wird, dass) einzelne Datenelemente getrennt sind
   + u.a. Komma (`,`), Semikolon (`,`) und Freizeichen (` `) möglich
   + Dass wir hier etwas ändern müssen erkennen wir daran, dass nicht die gesamte Anzahl an Spalten im `R`-Objekt vorhanden sind. Wenn wir uns das Objekt anschauen, dann sehen wir, mit welchem Zeichen die Elemente getrennt sind.

> *__Achtung__*:  Es kann dabei sein, dass **unterschiedliche Personen zum korrekten Einlesen derselben Datei andere Argumenten nutzen**. Das kann auf unterschiedliche Betriebssysteme oder Programme zum Öffnen der Dateien zurückzuführen sein.

Wenn wir den Dataframe eingelesen haben, erscheint er im **Environment**. 

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Environment_Datenobjekt.png")
```

<p style="line-height:10px;"></p>

<details><summary>Probleme? Nutze <font color="white">Trial-and-Error</font>!</summary><div class ="more">

Um in Erfahrung zu bringen, welche Argumente wir nutzen müssen, um die Daten korrekt einzulesen, können wir einen  **Trial-and-Error Ansatz** verwenden:

- Wir lesen die Datei erstmal ohne Spezifikation von Argumenten ein z.B. mit **`read.table("Dateipfad")`**.

- Dann schauen wir uns die Datei in `R` ein und beurteilen, ob diese korrekt angezeigt wird. Schauen wir uns dazu beispielhaft einmal folgende .csv-Datei aus dem lavaan - Paket an:

```{r}
#| echo: false
#| fig.align: center
data <- read.table("data/PoliticalDemocracy.csv")
library(knitr)
data_kurz <- head(data)
kable(data_kurz) 
```

- Die Datei wird scheinbar nicht korrekt angezeigt. Dabei fallen zwei Sachen ins Auge:
   + Es gibt **keine Spaltennamen** bzw. stehen diese in der ersten Zeile.
     + Daher müssen wird das Argument **`header=TRUE`** nutzen, damit die Spaltennamen als solche übernommen werden.
   + Es existiert **nur ein Spalte**.
     + Die Daten aus verschiedenen Spalten werden alle in einer Zeile dargestellt. Wenn man sich das genauer anschaut sieht man, dass die einzelnen Daten jeweils mit einem Komma voneinander getrennt sind. Folglich müssen wird das Argument `sep=","` benutzen, damit die Spalten korrekt getrennt werden.
   + Jetzt lesen wir die Datei nochmal mit diesen Argumenten ein: \
   **`read.table("Dateipfad", header=TRUE, sep=",")`**
     
```{r}
#| echo: false
#| fig.align: center
data <- read.table("data/PoliticalDemocracy.csv", sep=",", header=TRUE)
library(knitr)
data_kurz <- head(data)
kable(data_kurz) 
```
     
Nun wird die Datei korrekt dargestellt.
</div></details>


## FAQ

Um Daten in `R` aufbereiten und bearbeiten zu können, muss man diese erst einmal einlesen können. Manchmal gestaltet sich das leider schwieriger als erwartet.

Im Folgenden wollen wir uns einige Methoden zum Einlesen gängiger Dateiformate in `R` anschauen. Das Dateiformat einer Datei erkennt man an seiner Endung.

<details><summary>Kurzbefehle zum Kopieren des Dateipfads</summary><div class = "more">

<span class="highlight">Windows

Wir drücken <span class ="keybord">shift und machen dann einen *Rechtsklick* auf die Datei. Nun öffnet sich ein Menü, in welchem wir *Als Dateipfad kopieren* auswählen. **Wichtig** dabei ist, dass wir noch alle **\\** <font size="2">(backslashes)</font> aus dem kopierten Pfad in */* <font size="2">(forwardslashes)</font> ändern müssen.

<span class="highlight">Mac

Wir klicken einmal auf die Datei (sodass sie markiert ist; dann ist sie blau hinterlegt) und führen dann den Kurzbefehl <span class="keybord">alt + <span class="keybord">cmd + <span class="keybord">C aus.

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Daten-importieren/Bilder/Dateipfad.png")
```
</div></details>

<p style="line-height:10px;"></p>

Für eine ausführlichere Anleitung zum Einlesen von Dateien in `R` gibt es ein eigenständiges [Kapitel](Daten-importieren.qmd), in dem wir lernen, wie wir die Benutzeroberfläche von <span class="r">RStudio und Funktionen nutzen können.

---

### .csv, .txt und .dat

Diese Dateiformate sind die am weitesten verbreiteten Tabellendateien. Alle drei können u.a. mit den folgenden Funktionen eingelesen werden:

- `read.table("Dateipfad")` 
- `read.delim("Dateipfad")` 
- `read.csv("Dateipfad")` 

Diese drei Funktionen sind sehr ähnlich aufgebaut. Sind haben aber teilweise unterschiedliche Voreinstellungen <font size="2">(sog. *"Defaults"*)</font>. Zum Beispiel nimmt `read.csv()` an, dass Elemente aus verschiedenen Spalten in einer Zeile jeweils mit einem Komma <font size="2">(`sep=","`)</font> getrennt sind. Dafür werden bei `read.table()` ohne weitere Spezifikation die Spaltennamen nicht eingelesen <font size="2">(`header=FALSE`)</font>.

In Abhängigkeit der Speicherung der Dateien muss man teilweise noch weitere Argumente der Funktionen nutzen <font size="2">(d.h. nicht die Defaults einer Funktion nutzen)</font>.

- `header = TRUE` <font size="1">(bei read.table)</font>
   + Die richtigen Spaltennamen stehen sonst in der ersten Zeile und Spalten werden mit `V1`, `V2`, `V3` etc. benannt. 
- `sep = ";"` 
   + ... wenn die Elemente verschiedener Spalten in einer Zeile mit Semikolon getrennt sind
   + Dass wir hier etwas ändern müssen erkennen wir daran, dass nicht die gesamte Anzahl an Spalten im `R`-Objekt vorhanden sind. Wenn wir uns das Objekt anschauen, dann sehen wir, mit welchem Zeichen die Elemente getrennt sind.
- `fill = TRUE` <font size="1">(bei read.table)</font>
   + ... wenn fehlende Werte mit `NA` <font size="2">(`R`-Kodierung für Missings)</font> befüllt werden sollen.


Um in Erfahrung zu bringen, welche Argumente wir nutzen müsst, um die Daten korrekt einzulesen, können wir einen  **Trial-and-Error Ansatz** verwenden:

- Wir lesen die Datei erstmal ohne Spezifikation von Argumenten ein z.B. mit **`read.table("Dateipfad")`**.

- Dann schauen wir uns die Datei in `R` ein und beurteilen, ob diese korrekt angezeigt wird. Schauen wir uns dazu beispielhaft einmal folgende csv-Datei an:

```{r}
#| echo: false
#| fig.align: center
library(knitr)
data_kurz <- head(data)
kable(data_kurz) 
```

- Die Datei wird scheinbar nicht korrekt angezeigt. Dabei fallen zwei Sachen ins Auge:
   + Es gibt **keine Spaltennamen** bzw. stehen diese in der ersten Zeile.
     + Daher müssen wird das Argument **`header=TRUE`** nutzen, damit die Spaltennamen als solche übernommen werden.
   + Es existiert **nur ein Spalte**.
     + Die Daten aus verschiedenen Spalten werden alle in einer Zeile dargestellt. Wenn man sich das genauer anschaut sieht man, dass die einzelnen Daten jeweils mit einem Komma voneinander getrennt sind. Folglich müssen wird das Argument `sep=","` benutzen, damit die Spalten korrekt getrennt werden.
   + Jetzt lesen wir die Datei nochmal mit diesen Argumenten ein: \
   **`read.table("Dateipfad", header=TRUE, sep=",")`**
     
```{r}
#| echo: false
#| fig.align: center
data <- read.table("data/PoliticalDemocracy.csv", sep=",", header=TRUE)
library(knitr)
data_kurz <- head(data)
kable(data_kurz) 
```
     
Nun wird die Datei korrekt dargestellt.

> *__Achtung__*:  Es kann dabei sein, dass unterschiedliche Personen **zum korrekten Einlesen (derselben Datei) andere Argumenten nutzen**. Das kann auf unterschiedliche Betriebssysteme oder Programme zum Öffnen der Dateien zurückzuführen sein.

Mehr Informationen zu den Funktionen und ihren Argumenten findet wir, wenn wir unter *read.table* in der `R`-Dokumentation <font size="2">(**Help** im unteren rechten Panel)</font> nachschauen, oder indem wir `?read.table` in die Konsole eingeben.



### .xls und .xlsx

Diese Endungen gehören zum Programm **Excel**. Man muss externe Pakete installieren, um Excel-Dateien in `R` einlesen zu können. 

Um **.xlsx**-Dateien einzulesen, nutzen wir das Paket **openxlsx**.

```{r}
#| eval: false
library(openxlsx)
daten <- read.xlsx("Dateipfad")
```

Alternativ können wir das Paket **readxl** nutzen. Dieses ermöglicht uns sogar **.xlsx**- und **.xls**-Dateien einzulesen.

```{r}
#| label: excel 2
#| eval: false
library(readxl)
daten <- read_xlsx("Dateipfad")
```

### .sav

Die Endung .sav wird z.B. für **SPSS**-Dateien genutzt wird. Hierfür muss man wieder ein zusätzliches Paket <font size="2">(z.B. **foreign**)</font> runterladen, um SPSS-Dateien in `R` einlesen zu können.

```{r}
#| eval: false
library(foreign)
daten <- read.spss("Dateipfad", to.data.frame = TRUE)
# ohne to.data.frame wird eine Liste erzeugt
```


### Dateien via URL direkt aus dem Internet laden

Man kann Dateien auch direkt aus dem Internet laden mit Hilfe ihrer URL. 

```{r}
#| eval: false
daten <- load(url("Webadresse"))
```

Alternativ kann man die Datei auch herunterladen und dann in Abhängigkeit ihres Formats mit einem der oberen Befehle einlesen.


### .R, .Rda und .Rmd

`R`-eigene Dateien kann man am besten öffnen, indem man auf sie klickt. **Mac**-Benutzer haben dabei manchmal das Problem,  das sich die Datei per default in `R` öffnet. 

- Auf Mac-Rechnern kann man `R`-Studio folgendermaßen zum **Standardprogramm** zum Öffnen von `R`-Dateien machen <font size=1">(siehe Abb. unten)</font>
   + Rechtsklick auf die Datei
   + auf *Informationen* klicken
   + Unter *Öffnen mit* `R`-Studio auswählen **und** auf *Alle ändern...* klicken

<div style="text-align: center">
```{r}
#| echo: false
#| fig.show: hold
knitr::include_graphics("figures/Daten-importieren/Bilder/Mac_Info.png")
knitr::include_graphics("figures/Daten-importieren/Bilder/arrow_right.png")
knitr::include_graphics("figures/Daten-importieren/Bilder/Mac_Öffnen.png")
```
</div>

- Wenn man nur die **eine** `R`-Datei regulär mit `R`-Studio öffnen möchte: 
   + Rechtsklick auf die Datei
   + *Öffnen mit*
   + *Anderem Programm ...*
   + `R`-Studio auswählen
   + unten mittig ein Häkchen in das Kästchen *Immer öffnen mit* setzen <font size="2">(wenn das nicht angezeigt wird, muss man erst unten rechts auf *Optionen* klicken)</font>
   + *Öffnen*


## Weiterführende Hilfe

Falls wir ein **seltener genutztes Dateiformat** <font size="2">(z.B. Stata, JSON)</font> in `R` einlesen möchten, können wir in dem <a href="https://www.datacamp.com/community/tutorials/r-data-import-tutorial" target="_blank">Data Import Tutorial auf Datacamp</a> nachschauen.

## Übung

In diesem Abschnitt finden wir verschiedene Dateien, die wir zur Übung in **R** einlesen können. Wie wir dabei vorgehen <font size="2">(d.h. welchen Weg wir nutzen)</font> bleibt ganz uns überlassen. Wenn wir möchten, können wir die Tipps nutzen, um die Aufgaben zu lösen. Zur Überprüfung finden wir *mögliche* Lösungswege und die eingelesenen Daten.

Wenn wir **Hilfe beim Einlesen von Daten** brauchen, können wir uns das ausführliche [Kapitel](Daten-importieren.qmd) dazu anschauen.

Wenn wir **Probleme beim Installieren oder Laden von Paketen** haben, können wir unseren [Eintrag](Daten-importieren.qmd#FAQ) dazu anschauen.

---

### Übung 1: **.csv**

Lade dir von <a href="https://openpsychometrics.org/_rawdata/" target="_blank">openpsychometrics.org</a> die zip-Datei **NPI** runter. Entpacke diese und lese **data.csv** in **R** ein.


```{r}
#| echo: false
data_I <- read.csv("data/NPI.csv")

### oder:
# library(readr)
# data_I <- read_csv("~/Desktop/Arbeit_in_R/04_Daten_einlesen/Uebung/NPI/data.csv")
```

<div class="hint"><details><summary>**Tipp 1**</summary><p>
Der Datensatz besteht aus `r nrow(data_I)` Zeilen und `r ncol(data_I)` Spalten.
</p></details></div>

<p style="line-height:10px;"></p>

<details><summary>Lösung</summary><div class ="sol">
Man kan die Datei z.B. mit `read.csv("Dateipfad")` oder mit `read_csv("Dateipfad")` (aus dem Paket **readr**) korrekt einlesen.

Hier siehst du, wie die ersten 6 Zeilen der insgesamt 44 Spalten der Datei.

```{r}
#| echo: false
library(kableExtra)
data_I_6 <- head(data_I)
kable(data_I_6) %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "100%")
```
<br>
</div></details>
\

### Übung 2: **.csv**

Lade dir von <a href="https://openpsychometrics.org/_rawdata/" target="_blank">openpsychometrics.org</a> die zip-Datei **16PF** runter. Entpacke diese und lese **data.csv** in **R** ein.

```{r}
#| echo: false
data_II <- read.csv("data/16PF.csv", sep="")

### oder:
# library(readr)
# data_II <- read_table2("/home/julia/Dokumente/Arbeit/04_Daten_einlesen/Uebung/16PF/data.csv")
```


<div class="hint"><details><summary>**Tipp 1**</summary><p>
Der Datensatz besteht aus `r nrow(data_II)` Zeilen und `r ncol(data_II)` Spalten.
</p></details></div>
\
<div class="hint"><details><summary>**Tipp 2**</summary><p>
Die einzelnen Zellen (d.h. Elemente der Tabelle) sind durch Leerzeichen *(white space)* getrennt.
</p></details></div>
\
<div class="hint"><details><summary>**Tipp 3**</summary><p>
Die Information, wie die Zellen getrennt sind (siehe Tipp 2) übergibt man dem Argument `sep`.
</p></details></div>

<p style="line-height:10px;"></p>

<details><summary>Lösung</summary><div class="sol">
Man kan die Datei z.B. mit `read.csv("Dateipfad", sep="")` oder mit `read_table2("Dateipfad")` (aus dem Paket **readr**) korrekt einlesen.

Hier siehst du die ersten 6 Zeilen der ersten 50 Spalten der Datei.

```{r}
#| echo: false
library(kableExtra)
data_II_6 <- head(data_II[,1:50])
kable(data_II_6) %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "100%")
```
<br>
</div></details>
\

### Übung 3: **.sav**

Lade dir die Datei **ges7.sav** von <a href="https://www.metheval.uni-jena.de/materialien/ges7/ges7.sav" target="_blank">metheval.uni-jena.de</a> herunter und lese diese in **R** ein.

```{r}
#| echo: false
library(foreign)
data_III <- read.spss("data/ges7.sav", to.data.frame = TRUE)

### oder:
# library(haven)
# ges7 <- read_sav("~/Desktop/Arbeit_in_R/04_Daten_einlesen/Uebung/ges7.sav")
```


<div class="hint"><details><summary>**Tipp 1**</summary><p>
Die Endung `.sav` kennzeichnet SPSS-Dateien. Um diese einzulesen benötigt man zusätzliche Pakete, weil es in base **R** keine Funktion dafür gibt.
</p></details></div>
\
<div class="hint"><details><summary>**Tipp 2**</summary><p>
Der Datensatz besteht aus `r nrow(data_III)` Zeilen und `r ncol(data_III)` Spalten.
</p></details></div>

<p style="line-height:10px;"></p>

<details><summary>Lösung</summary><div class ="sol">
Man kan die Datei z.B. mit `read.spss("Dateipfad", to.data.frame = TRUE)` (aus dem Paket **foreign**) oder mit `read_sav("Dateipfad")` (aus dem Paket **haven**) korrekt einlesen.

Hier siehst du die ersten 6 Zeilen der ersten 50 Spalten der Datei.

```{r}
#| echo: false
library(kableExtra)
data_III_6 <- head(data_III[,1:50])
kable(data_III_6) %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "100%")
```
<br>
</div></details>
\

### Übung 4: **.xlsx**

Lade dir die **Bahnsteigdaten (RNI)** von <a href="http://download-data.deutschebahn.com/static/datasets/bahnsteig_regio/DBRNI-Bahnsteigdaten-Stand2015-10.xlsx" target="_blank">data.deutschebahn.com</a> herunter und lese diese in **R** ein.

```{r}
#| echo: false
library(readxl)
data_4 <- read_xlsx("data/DBRNI-Bahnsteigdaten-Stand2015-10.xlsx")

### oder:
# library(openxlsx)
# data_4 <- read.xlsx("Daten/DBRNI-Bahnsteigdaten-Stand2015-10.xlsx")
```


<div class="hint"><details><summary>**Tipp 1**</summary><p>
Die Endung `.xlsx` kennzeichnet Excel-Dateien. Um diese einzulesen benötigt man zusätzliche Pakete, weil es in base **R** keine Funktion dafür gibt.
</p></details></div>
\
<div class="hint"><details><summary>**Tipp 2**</summary><p>
Der Datensatz besteht aus `r nrow(data_4)` Zeilen und `r ncol(data_4)` Spalten.
</p></details></div>

<p style="line-height:10px;"></p>

<details><summary>Lösung</summary><div class="sol">
Man kan die Datei z.B. mit `read_xlsx("Dateipfad")` (aus dem Paket **readxl**) oder mit `read.xlsx("Dateipfad")` (aus dem Paket **openxlsx**) korrekt einlesen.

Hier siehst du die ersten 6 Zeilen der insgesamt 4 Spalten der Datei.

```{r}
#| echo: false
library(kableExtra)
data_4_kurz <- head(data_4)
kable(data_4_kurz) %>%
  kable_styling() %>%
  scroll_box(width = "100%", height = "100%")
```
<br>
</div></details>


---

<font size="2">Um eine möglichst exakte Replikation der Funktionen zu gewährleisten gibt es im folgenden relevante Angaben zum System (****R**-Version**, **Betriebssystem**, **geladene Pakete mit Angaben zur Version**), mit welchem diese Seite erstellt wurde.

```{r}
sessionInfo()
```

Für Informationen zur Interpretation dieses Outputs schaut auch den Abschnitt [Replizierbarkeit von Analysen](Pakete.qmd#replizierbarkeit-von-analysen) des Kapitels zu Paketen an.
</font>





