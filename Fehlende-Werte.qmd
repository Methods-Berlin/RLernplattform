# Fehlende Werte

Es kann in der Praxis häufiger vorkommen, dass Datensätze unvollständig sind z.B. wenn Teilnehmende einer Befragung nicht alle Fragen beantworten. Diese fehlenden Einträge nennt man **Missings**. In R werden sie (bei numeric) zumeist mit `NA` (*not available*) gekennzeichnet. 

<details><summary>Welche Kodierungen für fehlende Werte gibt es neben `NA` noch?</summary>
Beim Datentyp **numeric** (Zahlen) sind fehlende Werte durch `NA` oder durch `NaN` (*Not a Number*) gekennzeichnet. 

```{r}
num_vector <- c(1, 4, NA, NaN)
num_vector
is.na(num_vector)
```
Die Funktion `is.na()` gibt für jedes Element ein `TRUE` wenn es fehlt bzw. ein `FALSE` wenn es vorhanden ist. Wir werden im Laufe des Kapitels verschiedene Kombinationsmöglichkeiten für diese Funktion kennen lernen.

`NaN` entstehen z.B. bei unlösbaren Rechnungen wie Division durch $0$. 

```{r}
num_vector[1] <- num_vector[4]/0
num_vector
is.na(num_vector)
```
Beim Datentyp **character** (Buchstaben, Zeichen) hingegen könnten fehlende Eingaben auch durch `""` (leere Felder) gekennzeichnet sein z.B. wenn bei Freitextfeldern in einer Umfrage nichts eingegeben wurde. Das wird in R aber nicht automatisch als fehlender Wert erkannt.

> *__Achtung__*:  Wir sehen nachfolgend auch verdeutlicht, dass `NA` eine selbstständige Kodierung ist, und nicht als character kodiert wird.

```{r}
char_vec <- c(NA, "NA", "") 
char_vec
is.na(char_vec)
```

Später lernen wir, wie wir Werte auf `NA` umkodieren können.

Wir beschränken uns in vorliegendem Kapitel auf **`NA` in numerischen Datentypen** (d.h. quantitative Daten).
</details>

Fehlende Werte sind grundsätzlich mit **drei Schwierigkeiten** verbunden: 

- Der Datenausfall führt zu einer reduzierten Stichprobengröße $N$ welche wiederum zu einer verringerten Effizienz bei der Parameterschätzung und geringerer Power führt.
- Die Auswertung wird erschwert, weil viele statistische Verfahren vollständige Datensätze voraussetzen.
- Wenn systematische Unterschiede zwischen den beobachteten und den fehlenden Daten bestehen könnten die Parameterschätzungen verzerrt sein.

Daher ist es **sehr wichtig, sich vor der Auswertung einen Überblick über die fehlenden Werte zu verschaffen**.

In diesem Kapitel schauen wir uns an, ob und wenn ja wo und wie viele Missings sich im Datensatz befinden. Außerdem gibt es einen groben Überblick darüber, ob Missings zufällig sind und wie man mit ihnen umgehen kann. \

Der Umgang mit Missings ist ein komplexes Thema. In diesem Kapitel werden wir uns auf zwei gängige Methoden zum Umgang mit Missings beschränken. In Abhängigkeit der eigenen Fragestellung empfiehlt es sich, passende Methoden zu recherchieren.


<details><summary>Beispieldatensatz für dieses Kapitel</summary>
Das ist der Code für den Datensatz, an dem wir in diesem Kapitel arbeiten werden. Wenn du die Funktionen, die in diesem Kapitel vorgestellt werden, ausprobieren möchtest, führe den Code aus und erstelle den Datensatz.

```{r}
# Data Frame erstellen
daten <- matrix(c(-99, 0, 1, 3, 2, 
                  1, 2, 3, 2, 0, 
                  NA, 1, 3, 99, 0, 
                  1, 3, 3, 1, 2, 
                  2, 0, 2, 99, 3), nrow = 5, ncol = 5)

# in Dataframe umwandeln
daten <- data.frame(daten)

# Spalten und Zeilen benennen
colnames(daten) <- c("Var_1", "Var_2", "Var_3", "Var_4", "Var_5")
rownames(daten) <- c("Vpn_1", "Vpn_2", "Vpn_3", "Vpn_4", "Vpn_5")
```

```{r}
#| echo: false
print(daten)
```
*Anmerkung: Die Variablen sind intervallskaliert mit einer Skala von 0-3.*
</details>



> *__Achtung__*:  Wenn du Variablen, die Missings enthalten, für eine Analyse nutzt, denke immer daran, dass sich damit auch die **Stichprobengröße $N$ für diese spezifische Auswertung ändert**.


## Sind die Missings einheitlich kodiert?

In manchen Anwendungen werden Missings nicht mit `NA` sondern anderweitig kodiert (z.B. bei Unipark mit `99` oder `-99`). Daher müssen wir **dafür sorgen, dass R Missings auch als solche erkennt.** Das gewährleistet man, indem man alle Missings auf `NA` setzt.\

Wenn man weiß, wie Missings im Datensatz kodiert sind, kann man gleich zu [Wie kann ich die Missings auf `NA` setzen?] springen. Wenn man weiß, dass alle Missings einheitlich mit `NA` kodiert sind, kann man den ganzen Abschnitt auslassen.

### Wie kann ich prüfen, ob die Missings einheitlich kodiert sind?

Um herauszufinden, ob auch alle Missings einer Variablen korrekterweise mit `NA` kodiert sind, vergleichen wir die angegebenen Werte der Variablen in unseren Daten mit den möglichen Ausprägungen der Variablen (die wir zumeist im Codebuch finden; in unserem Fall steht diese Information in der Einleitung). 

Dazu kombinieren wir die Funktion `unique()`, die uns alle Werte eines Vektors (einmalig) ausgibt, mit der Funktion `sort()`, die uns die Werte noch sortiert (standarmäßig aufsteigend). Mit `na.last = TRUE` gibt uns `sort()` sogar die Information zum Vorhandensein von Missings am Ende aus.

```{r}
sort(unique(daten$Var_3), na.last=TRUE)
```

Da wir wissen, dass `Var_3` nur die Ausprägungen $0,1,2,3$ annehmen kann, können wir schließen, dass $99$ auch ein Missing sein muss.

Wenn man also alle möglichen Ausprägungen der Variablen kennt, kann man auf diese Weise einfach herausfinden, ob noch anderweitig kodierte Missings im Datensatz vorliegen.  

Wenn der Datensatz sehr groß ist, ist der oben gezeigte Ansatz allerdings sehr mühsam. Dann können wir die Funktion `sapply()` integrieren, um `unique()` und `sort()` auf jede Variable im Datensatz anzuwenden. Diese hat die Form `sapply(Daten, Funktion)`.

Da wir zwei Funktionen auf den Datensatz anwenden wollen - `unique()` und `sort()` - müssen wir `sapply()` zweimal anwenden:

```{r}
sapply(sapply(daten, unique), sort, na.last=TRUE)
```

<aside>Die hier durchgeführte Überprüfung ist analog zum [Plausibilitätscheck](Datenvorbereitung.qmd#plausibilitäts-check) im Kapitel zur [Datenvorbereitung](Datenvorbereitung.qmd).</aside>

In `Var_1` gibt es die Ausprägung `-99` und in `Var_5` die Ausprägung `99`, welche keine möglichen Ausprägungen sind. Es ist davon auszugehen, dass das ebenso Kodierungen für fehlende Werte sind.

### Wie kann ich die Missings auf `NA` setzen?

Nun wollen wir diese Missings umkodieren. Vorher wollen wir uns noch einmal anschauen, was passiert, wenn man das nicht macht.

Wenn man Missings im Datensatz nicht einheitlich auf `NA` kodiert, nimmt R an, dass es sich um gültige Werte handelt. Das führt dann zu falschen Ergebnissen. Das schauen wir uns exemplarisch einmal am Mittelwert der Spalte `Var_3` an.

```{r}
#| echo: false
print(daten)
```

```{r}
# Mittelwert vor Umkodierung
mean(daten$Var_3, na.rm=TRUE)
```


Nun kodieren wir die Missings in `Var_3` einheitlich um ...

```{r}
# Umkodierung für einzelne Variablen
daten$Var_3[daten$Var_3 == 99] <- NA
```

<aside>\
**==** heißt "ist genau"</aside>

Der Befehl ersetzt in `daten` Elemente der Spalte `Var_3`, welche die Ausprägung `99` besitzen, mit `NA`.

```{r}
#| echo: false
print(daten)
```

... und schauen uns den Mittelwert von `Var_3` wieder an.

```{r}
# Mittelwert nach Umkodierung
mean(daten$Var_3, na.rm=T)
```

Hätten wir die Missings nicht einheitlich auf NA kodiert, hätten wir errechnet, dass der Mittelwert von `Var_3` 25.75 anstatt ~`r round(mean(daten$Var_3, na.rm=T), 2)` betragen würde.

Wir sehen also, dass es **sehr wichtig ist, in Erfahrung zu bringen, ob im Datensatz alle Missings einheitlich auf NA gesetzt sind**, und wenn nicht, diese einheitlich zu kodieren, da man **sonst falsche Ergebnisse** erhält.


Jetzt enthält die Spalte `Var_3` schon keine Elemente mit der Ausprägung `99` mehr, aber in `Var_1` gibt es noch ein `-99` und in `Var_5` noch ein `99`.

Um nicht einzeln Spalten und Ausprägungen ansprechen zu müssen, kann man alles in einem Befehl kombinieren.

```{r}
# Umkodierung für den gesamten Datensatz
daten[daten == 99 | daten == -99] <- NA
```

<aside>\
**|** heißt "oder"</aside>

Hiermit werden im gesamten `daten` jene Elemente, welche die Ausprägung `99` oder `-99` besitzen, durch `NA` ersetzt.



## Enthält ein Datensatz Missings?

Wenn wir wissen wie unsere fehlenden Werte kodiert sind, wollen wir in einem nächsten Schritt natürlich wissen, ob ein Datensatz überhaupt Missings enthält. Es gibt zahlreiche Ansätze, um das herauszufinden. Einige davon schauen wir uns einmal genauer an.

Bei kleineren Datensätzen ist eine **visuelle Inspektion** möglich. Dafür nutzt man entweder `View()` (Großbuchstabe am Anfang beachten!) oder man klickt auf den Datensatz im Environment (oberes rechtes Panel).

```{r}
#| echo: false
print(daten)
```


Um zu überprüfen, ob ein Datensatz **mindestens einen fehlenden Wert** enthält, kann man `anyNA()` nutzen. Man bekommt ein `TRUE` (d.h. ja, mindestens ein Missing enthalten) oder `FALSE` (d.h. nein, keine Missings enthalten) ausgegeben.

```{r}
#| include: true
anyNA(daten)
```


Um einen groben Eindruck davon zu bekommen, **welche Elemente fehlen**, kann man `is.na()` nutzen. Der Output besteht aus `FALSE` oder `TRUE` für jedes Element des Datensatzes. `TRUE` bedeutet dabei, dass an dieser Stelle ein Missing ist.

```{r}
is.na(daten) 
```

> *__Achtung__*:  Bei `is.na()` und `anyNA()` wird auch `NaN` (*Not a number*; entsteht bei unlösbaren Rechnungen) mitgezählt. Da Zweitere aber wesentlich seltener vorkommen, konzentrieren wir uns nur auf `NA`.

Den logischen Vektor, den `is.na()` erzeugt, kann man mit `which()` kombinieren, um sich die Positionen der Missings ausgeben zu lassen. Mithilfe des Arguments `arr.ind = TRUE` lässt man sich die Reihe und die Spalte dieser ausgeben.

Ohne `arr.ind = TRUE` würde man nur die Indizes ausgegeben bekommen. Für Matrizen sind diese weniger leicht zu nutzen, weil die Nummerierung fortlaufend spaltenweise vorliegt. In unserem Fall einer 5 x 5 Matrix heißt das z.B., dass das Element in der 1. Zeile der 3. Spalte (also der eine fehlende Wert) den Index 11 trägt.

Bei Vektoren kann man `arr.ind = TRUE` weglassen, da diese entweder nur aus einer Spalte oder einer Zeile bestehen.

```{r}
which(is.na(daten), arr.ind = TRUE)
```



## Wie kann man die Missings zählen (und verorten)?

Die genaue Anzahl der Missings zu kennen ist wichtig, um ein Gefühl dafür zu kriegen, wie vollständig ein Datensatz ist. Dazu kombinieren wir die `is.na()`-Funktion mit anderen Funktionen, die `FALSE` (d.h. vorhandenen Werte) und `TRUE` (d.h. fehlenden Werte) zählen.


### Alle Missings eines Datensatzes

Zuerst schauen wir uns die Gesamtanzahl der Missings aller Elemente im Datensatz an.

```{r}
#| include: true
table(is.na(daten))
```

### Missings in *einzelnen* Spalten oder Zeilen 


*Spalten*weises Zählen der Missings gibt Informationen über mögliche Probleme mit bestimmten Variablen. *Zeilen*weises Zählen der Missings gibt beispielsweise Informationen über Teilnehmende, die die Fragen nicht vollständig beantwortet haben.

Es ist daher wichtig, sich einen Überblick darüber zu machen, ob sich bei bestimmten Variablen oder bei bestimmten Personen besonders viele Missings häufen. Wenn das der Fall sein sollte, muss man überlegen, wie man damit umgeht (dazu mehr im späteren Verlauf).


Wenn wir **eine** bestimmte Spalte oder Zeile betrachten möchten, können wir die `is.na()`-Funktion mit der `table()`-Funktion kombinieren. Zweiteres sorgt dafür, dass wir eine Häufigkeitstabelle von `TRUE` und `FALSE` ausgegeben bekommen.

<!-- Um herauszufinden, ob die Missings mit `NA` kodiert sind, schauen wir uns die einzelnen Ausprägungen einer Variablen an. Dazu nutzen wir die `table()`-Funktion, die eine Häufigkeitstabelle erstellt.  -->
<!-- Optional können wir mit dem Argument `useNA='ifany'` noch festlegen, dass auch die Anzahl der `NA`s gezählt werden soll. -->

<!-- ```{r} -->
<!-- table(daten$Var_3, useNA='ifany') -->
<!-- ``` -->

Wir können auf verschiedenem Wege auf eine Spalte bzw. Zeile eines Datensatzes referenzieren.

```{r}
#| include: true
table(is.na(daten$Var_1)) # Datensatz$Spaltenname
table(is.na(daten["Var_1"])) # Datensatz["Spaltenname"]
table(is.na(daten["Vpn_1",])) # Datensatz["Zeilenname"]
table(is.na(daten[,1])) # Datensatz[,Spaltenindex]
table(is.na(daten[1,])) # Datensatz[,Zeilenindex]
```

> *__Achtung__*:  Die ersten drei vorgestellten Möglichkeiten, `$` und `Datensatz["Spalten- bzw. Zeilenname"]`,  funktionieren nur bei __Dataframes__, und nicht bei Matrizen. Die Möglichkeit der **Indexierung** können wir auch bei **Matrizen** nutzen. 

<aside>Mehr Informationen zu Datenstrukturen finden wir im Kapitel [Einführung in R](Einfuehrung_in_R.qmd).</aside>

### Missings in *allen* Spalten oder Zeilen

Wenn man sich  einen Überblick über die Missings in allen Variablen bzw. bei allen Personen verschaffen möchte, kann man dafür `colSums()` bzw. `rowSums()` mit dem `is.na()`-Befehl kombinieren. Damit werden spalten- bzw. zeilenweise Summen von `TRUE` (d.h. den Missings) gebildet. 

Um die Größenordnung der Missings besser beurteilen zu können, sollte man sich der maximal möglichen Anzahl der Elemente in einer Spalte bzw. Zeile bewusst sein. Diese können wir mit `nrow()` bzw. `ncol()` in Erfahrung bringen. 

```{r}
#| include: true
# Übersicht der Missings in allen Variablen (Spalten)
colSums(is.na(daten))
# ... im Vergleich zur maximalen Anzahl an Beantwortungen
nrow(daten)
```

```{r}
#| include: true
# Übersicht der Missings in allen Personen (Zeilen)
rowSums(is.na(daten))
# ... im Vergleich zur maximalen Anzahl der beantwortbaren Fragen
ncol(daten)
```

<!-- Alternativ zu `nrow()` und `ncol()` können wir auch die Angaben zu **obs.** (observations, Zeilen) und **variables** (Spalten) im Environment, die rechts vom Datensatz stehen, ablesen. -->

<!-- ```{r, out.width = "400px", fig.align="center", echo=FALSE} -->
<!-- knitr::include_graphics("figures/Fehlende-Werte/Bilder/environment.png") -->
<!-- ``` -->


#### Visualisierung der Missings

Mit der Funktion `aggr()` aus dem Paket **VIM** kann man sich zwei Plots ausgeben lassen, die den relativen Anteil von Missings in den einzelnen Variablen und die Anzahl an Missings in bestimmten Kombinationen von Variablen (d.h. in den Zeilen) ausgeben. 

Wenn man `summary(aggr())` nutzt, bekommt man sowohl die grafische Visualisierung als auch eine Übersicht der Häufigkeiten.

```{r}
#| label: aggr plot
#| message: false
# install.packages("VIM")
library(VIM)
summary(aggr(daten))
```

Im __linken Plot__ sehen wir, dass nur Missings in `Var_1`, `Var_3` und `Var_5` vorhanden sind. Außerdem sehen wir auf der $y$-Achse den relativen Anteil an Fällen in den Variablen. In der Übersicht unter der Tabelle sehen wir die absoluten Häufigkeiten für alle Variablen (`Missings per variable`). Im __rechten Plot__ sehen wir die vorhanden Kombinationen von Missings in den Variablen. __Blau__ zeigt an, dass kein Missing vorhanden ist; __rot__ zeigt an, dass ein Missing vorhanden ist. Beispielsweise zeigt die unterste Reihe (die komplett blau ist) eine Kombination, in der keine Missings in Variablen vorhanden sind. Rechts daneben sieht man einen Balken, der den Anteil dieser Kombination im Verhältnis zu den anderen Kombinationen darstellt. Der Balken in der untersten Reihe ist der größte, d.h. dass diese Kombination am häufigsten vorkommt und somit die meisten Fälle (Zeilen) im Datensatz keine Missings enthalten. Leider bekommen wir hier keine Häufigkeiten dafür angezeigt. Dazu können wir aber in die unten stehende Übersicht schauen. (`Missings in combinations of variables`), in der wir absolute und relative Häufigkeiten ausgegeben bekommen.


## Literaturempfehlungen

Für ein tiefergehenden Einblick empfehlen wir Euch die folgenden Arbeiten: 

> <a name="allison"></a>**Allison**, P. D. (2002). Missing Data. In P. D. Allison (Ed.), *The Sage Handbook of Quantitative Methods in Psychology (pp.72-89).* Thousand Oaks, CA: Sage Publications Ltd. Abgerufen über <a href="http://www.statisticalhorizons.com/wp-content/uploads/2012/01/Milsap-Allison.pdf" target="_blank">http://www.statisticalhorizons.com/wp-content/uploads/2012/01/Milsap-Allison.pdf</a>

> <a name="ccwa"></a>**Cohen**, J., **Cohen**, P., **West**, S. G., & **Aiken**, L. S. (2003). Missing Data. In J. Cohen, P. Cohen, S. G. West, & L. S. Aiken (Eds.), *Applied Multiple Regression/Correlation Analysis for the Behavioral Sciences *(pp. 431-451)*. Hillsdale, NJ: Erlbaum.\
(für HU-Studierende über <a href="http://ub.hu-berlin.de" target="_blank">ub.hu-berlin.de</a> zugänglich) \

<aside>Lehrbuch der Master-Vorlesung "Multivariate Verfahren"</aside>

> <a name="little"></a>**Little**, R. J. A. (1988). A test of missing completely at random for multivariate data with missing values. *Journal of the American Statistical Association*, *83*(404), 1198–1202.\
(für HU-Studierende über <a href="http://ub.hu-berlin.de" target="_blank">ub.hu-berlin.de</a> zugänglich) 

> <a name="schafgra"></a>**Schafer**, J. L., & **Graham**, J. W. (2002). Missing Data: Our View of the State of the Art. *Psychological Methods*, *7*(2), 147-177. <a href="https://psycnet.apa.org/doi/10.1037/1082-989X.7.2.147" target="_blank">https://psycnet.apa.org/doi/10.1037/1082-989X.7.2.147</a>

---

Um eine möglichst exakte Replikation der Funktionen zu gewährleisten gibt es im folgenden relevante Angaben zum System (**R-Version**, **Betriebssystem**, **geladene Pakete mit Angaben zur Version**), mit welchem diese Seite erstellt wurde.

```{r}
sessionInfo()
```

Für Informationen zur Interpretation dieses Outputs schaut auch den Abschnitt [Replizierbarkeit von Analysen](Pakete.qmd#replizierbarkeit-von-analysen) des Kapitels zu Paketen an.













