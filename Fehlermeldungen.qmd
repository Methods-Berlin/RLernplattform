# Fehlermeldungen

Beim Arbeiten mit **R** wird es früher oder später einmal dazu kommen, dass wir in der Konsole eine Fehlermeldung ausgegeben bekommen.

Generell kann man in **R** drei verschiedene Meldungen (*Conditions*) erhalten:

- **error**:\
Durch Fehler wird die Ausführung der Funktion unterbrochen.
- **warning**\
Im Gegensatz zu echten Fehlern (errors) wird die Ausführung des Codes bei warnings nicht unterbrochen. Warnmeldungen dienen dazu, die Aufmerksamkeit des Benutzers auf potentielle Probleme zu lenken. Im Unterschied zu errors kann man mehrere Warnungen von einer Funktion erhalten.
- **message**\
Geben Informationen dazu, was eine Funktion (zusätzlich) gemacht hat.

<aside>Eine vertiefte Einführung in die verschiedenen Conditions finden wir auf <a href="https://adv-r.hadley.nz/conditions.html" target="_blank">Advanced R</a>.</aside>

Wir konzentrieren uns in diesem Abschnitt auf ersteres: Fehlermeldungen, die unsere Arbeit in **R** anhalten lassen und nach einer Lösung verlangen.

Fehlermeldungen können unterschiedliche Ursachen haben. Häufig sind es Tipp- oder Syntaxfehler, aber auch Probleme mit Datentypen (z.B. eine Funktion erfordert einen anderen als den genutzen Datentyp) und Paketen (z.B. Laden des Paketes einer Funktion vergessen) kommen häufiger vor.

<aside>Es gibt keine fixe Taxonomie der Arten von Fehlern in **R**. Es seien hier nur einige genannt.</aside>

Fehlermeldungen sind häufig nicht einfach zu verstehen. Das liegt u.a. daran, dass EntwicklerInnen von Paketes jeweils eigene Fehlermeldungen für die enthaltenen Funktionen formulieren. Deswegen folgen diese zumeist keinem einheitlichen Muster und sind teils schwer zu verstehen.

Im Folgenden gehen wir uns zuerst darauf ein, welche Hilfe uns **RStudio** gibt, um **Fehler zu vermeiden**. Anschließend schauen wir uns an einigen konkreten (Syntax-)Fehlermeldungen an, wie man diese **verstehen** kann. Danach lernen wir, wie wir **Suchmaschinen sinnvoll nutzen** können, um Lösungen für unsere Fehlermeldungen zu finden. \

<details class ="bsp"><summary>Beispieldatensatz für dieses Kapitel</summary>

Für das vorliegende Kapitel werden wir uns einen kleinen Datensatz generieren, mit dem wir arbeiten werden.

```{r}
# Matrix erstellen
daten <- matrix(c(0, 1, 3, 2, 2, 
                 3, 2, 0, 3, 1, 
                 3, 0, 1, 3, 1,
                 1, 2, 1, 0, 3), nrow = 5, ncol = 4)

# in Dataframe umwandeln
daten <- data.frame(daten)

# Spalten benennen
colnames(daten) <- c("Var_1", "Var_2", "Var_3", "Var_4")
```

```{r}
#| echo: false
print(daten)
```
</details>


## Tools die uns helfen, Fehler zu vermeiden

Bevor wir uns dem Verstehen von konkreten (Syntax-)Fehlermeldungen widmen und anschauen, wie wir effizient im Internet suchen können, schauen wir uns **zwei Hilfsmittel** an, die uns die Entwicklungsumgebung **RStudio** gibt, um **Fehler zu vermeiden**.

### **R**-Dokumentation

Wenn wir eine uns noch unbekannte Funktion nutzen (aber auch wenn 
wir aus einer Fehlermeldung nicht schlau werden) können wir die Dokumentation nutzen. Diese können wir in RStudio im unteren rechten Panel unter <font color ="#649B32">Help öffnen. In das <font color ="#FF1D00">Suchfeld geben wir den Namen der Funktion ein. 

Alternativ können wir die Hilfefunktionen `?` oder `help()` nutzen (z.B. <span class="code">?matrix oder <span class="code">help(matrix)). 

Mit Klick auf das <font color ="#FD9612">eingekreiste Icon kann man sich die Hilfe-Seite auch in einem extra Fenster anzeigen lassen.

<aside>Wir finden die **R**-Dokumentation auch im Internet, allerdings ermöglicht uns **RStudio**, diese ohne Internetverbindung und direkt in der Entwicklungsumgebung zu öffnen.</aside>

```{r}
#| out.width: 550px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Fehlermeldungen/Bilder/doc.png")
```

Wir bekommen hier (zumeist) folgende Informationen: aus welchem Paket die Funktion ist (oben links in **{ }**), was die Funktion macht (Description), die Funktionsdefinition ggf. mit Defaults (Usage), ihre Parameter mit jeweils gültigen Argumenten (Arguments), weitere Details zur Nutzung (Details), ähnliche Funktionen (See also) und Beispiele zur Nutzung (Examples).

<details><summary>*Was sind Parameter, Argumente und Defaults?*</summary>
Parameter bezeichnet die (formalen) **Variablen einer Funktion** (z.B. `nrow` aus `matrix()`), denen wir unsere (tatsächlichen) Argumente (z.B. `3`), d.h. unseren **Input**,  übergeben. Default bezeichnet ein **voreingestelltes Argument** (z.B. `nrow=1`).

Ohne explizite Spezifikation des Parameters unsererseits wird (wenn vorhanden) der Default verwendet. Wir könnten natürlich auch ein anderes (als das voreingestellte) Argument festlegen.

Funktionen, die ausschließlich Parameter mit Defaults besitzen, (z.B. `matrix()`) werden auch ohne Spezifikation ausgeführt. Funktionen mit (min. einem) Parameter ohne Default (z.B. `mean()`) werden ohne Spezifikation dieser nicht ausgeführt (wir müssen dem Parameter `x` einen Vektor, von dem wir den Mittelwert berechnen wollen, übergeben). Mehr Informationen zu Funktionsdefinition und etwaigen Defaults finden wir im Abschnitt Usage in der R-Dokumentation.

Mehr Informationen zum Aufbau von Funktionen finden wir in der [Einführung in R](Einfuehrung_in_R.qmd)
</details>



Eine [detaillierte Einführung zur Nutzung der Dokumentation](Einfuehrung_in_RStudio.qmd#R Dokumentation) befindet sich im Kapitel [Einführung in R Studio](Einfuehrung_in_RStudio.qmd).

### Code Diagnostik

> *__Achtung__*: Wir können die Code Diagnostik nur nutzen, wenn wir unser **Skript gespeichert** haben.

Vor Ausführung unseres Codes erhalten wir Hinweise, beispielsweise wenn Argumente einer Funktion fehlen oder unerwartete Zeichen auftauchen. 

Der Fehler wird **unterstrichen** und es erscheint außerdem ein **Symbol** links neben der Zeilennummerierung. Zusätzlich erhalten wir einen **ausformulierten Hinweis**, wenn wir mit der Maus über das Symbol fahren.

```{r}
#| out.width: 280px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/cd dreieck 1.png")
```

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/cd dreieck 2.png")
```



<details><summary>Lösung</summary><div class ="sol">

Das dritte Argument, welches nach dem zweiten Komma in `c()` folgen sollte, ist leer. In unserem Beispiel sind die Argumente von `c()` Zahlen (zur Indexierung der Spalten vom Dataframe `daten`). Wenn wir die Spalten `1`, `2` und `3` extrahieren wollten, würden wir das überflüssige Komma löschen: <font color ="#930047">`daten[,c(1,2,3)]`

</details>\

```{r}
#| out.width: 260px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/cd kreis 1.png")
```

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/cd kreis 2.png")
```



<details><summary>Lösung</summary><div class ="sol">

Unser Code endet mit einer schließenden runden Klammer, welche kein öffnendes Pendant hat. Außerdem hat unsere öffnende eckige Klammer kein abschließendes Pendant. Wahrscheinlich haben wir uns vertippt und anstatt einer schließenden eckigen Klammer eine schließende runde Klammer eingefügt. So würde der richtige Code aussehen: <font color ="#930047">`daten[,c(1,2,3)]`
</details>\

Auf dieser <a href="https://support.rstudio.com/hc/en-us/articles/205753617-Code-Diagnostics?version=1.2.1335&mode=desktop" target="_blank">Seite</a> wird die Möglichkeiten der Code Diagnostics noch detaillierter erklärt und wir erhalten eine Anleitung dazu, wie wir verschiedene Einstellungen tätigen können (in der oberen Menüleiste über *Tools > Global Options > Code > Diagnostics*).


## Fehlermeldungen verstehen

Schauen wir uns einmal den typischen Aufbau von Fehlermeldungen an:\

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: left
#| collapse: true
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fehl.png")
```

<aside>Diese Fehlermeldung werden wir im Abschnitt [**Suchen im Internet**] noch aufklären.</aside>

Die Information **vor** dem Doppelpunkt gibt uns an, in welcher Funktion der Fehler steckt; die Information **nach** dem Doppelpunkt gibt Aufschluss über die Art des Fehlers. Zweiteres ist für die Fehlersuche (zumeist) von großer Bedeutung.

Im Folgenden konzentrieren wir uns auf eine Art von Fehler, mit der vor allem AnfängerInnen häufig konfrontiert sind: Syntaxfehler.

> Syntaxfehler sind Fehler, die durch eine **Verletzung des formalen Aufbaus einer Funktion** zustande kommen. Manchmal entstehen sie auch nur durch Vertippen.

Syntaxfehler können zumeist relativ einfach durch Korrigieren der fehlerhaften Syntax, i.d.R. dem Einfügen oder Entfernen von bestimmten Zeichen, zumeist Kommata oder Klammern, gelöst werden.

Schauen wir uns nun einige Beispiele an:



Wenn **ein oder mehrere Zeichen überflüssig sind bzw. fehlen**, dann bekommt man <font color ="#C6180B">`Unerwartete(s) '...' in "..."` ausgegeben. Hierbei teilt uns die Meldung mit, *wo* der Fehler liegt: In den Anführungszeichen <font color ="#C6180B">`"..."` wird nur ein Teil des Codes ausgegeben und der Fehler ist zumeist das zuletzt ausgegebene Zeichen (oder es liegt unmittelbar davor).

```{r}
#| out.width: 440px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fm 1.png")
```

<details><summary>Lösung</summary><div class ="sol">
z.B. <font color ="#930047">`daten[2]`

Damit extrahiert man auch die zweite Spalte aus `daten`, aber hier wird der Name der Spalte (Variable) nicht mit ausgegeben. Außerdem werden die Elemente der Spalte zeilwenweise wiedergegeben.
</details>\

Wenn mehrere Syntaxfehler enthalten sind, und man nicht gleich alle erkennt, muss man diese nach und nach beseitigen. 

```{r}
#| out.width: 430px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fm 2.png")
```

<details><summary>Lösung</summary><div class="sol">
z.B. <font color ="#930047">`daten[2]`

Zuerst wurde nur auf das fehlerhafte `$` hingewiesen. Nachdem dieses gelöscht wurde, wird erst auf das falsche `)` verwiesen.
</details>\

Manchmal bekommt man auch nur <font color ="#C6180B">`unerwartetes Symbol in: "..."` ausgegeben. In den Anführungszeichen <font color ="#C6180B">`"..."` wird hier nur der Teil des Codes ausgegeben, in dem der Fehler ist, nicht aber (wie oben), auch das problematische Zeichen.

```{r}
#| out.width: 350px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fm 3.png")
```

<details><summary>Lösung</summary><div class ="sol">
z.B. <font color ="#930047">`daten[,2]` _oder_ <font color ="#930047">`daten[2]`

Hier wurde nicht bemerkt, dass bei der ersten Funktion `daten[,2` noch ein `]` fehlt und einfach schon die nächste Funktion `daten[,3]` ausgeführt. So nahm **R** an, dass beide zusammen gehören würden.
</details>\

Wenn man Komma-Fehler hat, bekommt man beispielsweise folgende Meldung angezeigt.

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fm 4.png")
```

<details><summary>Lösung</summary><div class ="sol">
z.B. <font color ="#930047">`daten[c(1,2)]` _oder_ <font color ="#930047">`daten[c(1,2,3)]`

Hier weist uns **R** darauf hin, dass das dritte Argument, welches nach dem zweiten Komma folgen sollte, leer ist. In Abhängigkeit davon, welche Spalten aus Daten extrahiert werden sollen, *löscht* man das Komma (um Spalte `1` und `2` zu extrahieren) oder man *ergänzt* einen weiteren Spaltenindex (z.B. 3; um Spalte `1`, `2` und `3` zu extrahieren).
</details>




## Suchen im Internet

Nun gibt es auch Fehlermeldungen, die wir nicht auf Anhieb verstehen. Dafür kann es vielfältige Ursachen geben. Wenn wir schon in der R-Dokumentation nachgeschaut haben und trotzdem noch ratlos sind, können wir im Internet nach Hilfe suchen. Wir können dafür Suchmaschinen direkt spezielle Foren nutzen.

__Hierbei gibt es nicht *den einen* Weg, fündig zu werden.__ Häufig gibt es eine Fehlermeldung, die bei verschiedenen Problemen (mit unterschiedlichen Funktionen) angezeigt wird. Dann muss man filtern, welche Seite für das eigene Anliegen relevant sein könnte. Es kann ebenso möglich sein, dass es zu manchen Problemen einfach noch keine Lösung gibt. Dieser Fall ist eher seltener und tritt vor allem bei neueren oder seltener genutzen Paketen auf. 

Im Folgenden schauen wir uns einige **wichtige Aspekte an, auf die man achten sollte**, wenn man im Internet nach Lösungen zu Fehlermeldungen sucht.

Dafür schauen wir uns folgendes Beispiel an: Wir wollen eine Korrelationstabelle erstellen, in der wir aus `daten` die ersten beiden Spalten `[1:2]` mit den letzten beiden Spalten `[3:4]` korrelieren. Dazu wurde die Funktion `cor.test()` genutzt. Wir bekommen folgende Fehlermeldung:

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: left
#| collapse: true
knitr::include_graphics("figures/Fehlermeldungen/Bilder/fehler.png")
```


<h2>a\) Passende Suchbegriffe nutzen</h2>

Sinnvoll ist es im Suchtext drei Aspekte miteinzubeziehen:

- das <font color ="#649B32">**Programm**, mit dem es Probleme gibt
- die <font color ="#FF1D00">**Funktion**, mit der es Probleme gibt 
   + auch ersichtlich an der Information **vor** dem Doppelpunkt
- Ausschnitte aus der <font color ="#8DA0FF">**Fehlermeldung**
   + von den Informationen **nach** dem Doppelpunkt

Unsere Suche könnte folgendermaßen aussehen:

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/search words.png")
```

Anstatt eine globale Suchmaschine wie google oder ecosia zu nutzen, kann man auch eine spezifisch für Anliegen in **R** konzipierte Suchmaschine wie <a href="https://rseek.org" target="_blank">**rseek**</a> nutzen. Dann kann man im Suchtext den Namen des <font color ="#649B32">Programms weglassen, beispielsweise nur *<font color ="#FF1D00">cor.test <font color ="#8DA0FF">x numerischer Vektor* suchen.


<h2>b\) Ergebnisse filtern</h2>

Nachfolgend sehen wir die ersten fünf Ergebnisse der Suche.

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/search links.png")
```

<aside>Suche mit ecosia am 05.09.2019 um 17:30Uhr</aside>

Mit Ausnahme des zweiten Links sieht es so aus, als würden die Seiten zu unspezifisch für unser Problem sein. 

Der zweite Link weist gleich zwei **Übereinstimmungen** auf: Wir wollten einen <span class = "ex">correlation test rechnen und haben die selbe Fehlermeldung (<span class = "ex">'x' must be a numeric vector) bekommen.

Schauen wir uns also das <a href="https://stackoverflow.com/questions/43497128/r-error-in-correlation-test-x-must-be-a-numeric-vector" target="_blank">zweite Ergebnis</a> an.

<h2>c\) Lösungsvorschläge ausprobieren</h2>

In Foren findet man in aller Regel oben die Problembeschreibung und darunter die geposteten Lösungsvorschläge.

In unserem Beispiel, hat der/die Fragende mit der gleichen Funktion (`cor.test()`) gearbeitet. 

Schauen wir uns den Lösungsvorschlag an: Es wird vorgeschlagen den Datensatz mit `str()` zu überprüfen, ob die enthaltenen Variablen numerische Vektoren sind. Wenn dem nicht so ist, muss man sie dementsprechend umwandeln.

```{r}
str(daten)
```

Bei uns scheinen alle Spalten numerisch (`num`) zu sein. Diese Lösung scheint also nicht passend für unser Problem zu sein.


<h2>Zurück zu b) Ergebnisse filtern und c) Lösungsvorschläge ausprobieren</h2>

Gehen wir also zurück zu unserer Suche und schauen uns andere Seiten an. So sehen die nächsten fünf Ergebnisse der Suche aus.

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/search links 2.png")
```

Bis auf den zweiten Link sehen die Vorschläge hier auch wieder sehr unspezifisch aus. Bei diesem gibt es zwei Parallelen zu unserem Problem: <span class = "ex">cor.test wird auf einen <span class = "ex">data frame angewendet.
Sehen wir uns die <a href="https://www.reddit.com/r/Rlanguage/comments/23infd/running_cortest_on_data_frames/" target="_blank">Seite</a> mal an.

Wir landen in einem Foreneintrag. Die Antwort von <font color ="dodgerblue">dasonk weißt uns darauf hin, dass man an `cor.test()` nur *zwei Vektoren* übergeben kann. Wir haben aber 4 Vektoren übergeben. In der nächsten Antwort von <font color ="dodgerblue">anbende wird vorgeschlagen, die Korrelationstabelle mit `cor()` zu erstellen. Allerdings muss man die Signifikanztestung immer noch mit `cor.test()` machen.

Die Antwort hat uns schon weitergeholfen: Wir haben eine Vorstellung davon, wo der Fehler liegen könnte. Jetzt ist es sinnvoll, eine neue Suche zu starten, um nach einer Funktion zu suchen, die sowohl eine Korrelationstabelle erstellt, als auch eine Signifikanztestung durchführt.

Hier kombinieren wir Suchwörter zum <font color ="#649B32">**Programm** und zu dem, was die <font color ="#FF230C">**Funktion**, die wir suchen, leisten soll.

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/search words 2.png")
```

Dann schauen wir uns wieder die ersten 5 Vorschläge dazu an:

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/search links neu.png")
```

<aside>Suche mit ecosia am 06.09.2019 um 09:40Uhr</aside>

Der erste Vorschlag ist nicht ganz das, was wir wollen. Hier geht es scheinbar mehr um *elegante* Korrelationstabellen.

Der zweite Vorschlag hingegen scheint vielversprechender. Schauen wir uns <a href="http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software" target="_blank">diesen</a> einmal an.

Es ist eine Seite, auf der verschiedene Aspekte der Umsetzung von Korrelationstabellen in **R** erklärt werden. Oben finden wir eine Gliederung. Wir springen gleich zum Punkt *'Correlation matrix with significance levels (p-value)'*.

Hier erfahren wir, dass man die Funktion `rcorr()` aus dem **Hmisc**-Paket nutzen kann. Außerdem wird man darauf hingewiesen, dass diese Funktion nur mit Matrizen arbeiten kann. Der Befehl, mit dem man Objekte in Matrizen umwandeln kann, wird auch angegeben.

Probieren wir diesen Weg einmal aus.

```{r}
# install.packages("Hmisc")
library(Hmisc)
rcorr(as.matrix(daten[1:2]), as.matrix(daten[3:4]))
```

Wir erhalten zwei Matrizen als Output. Eine enthält die Korrelationen, die andere die p-Werte. Wir haben also gefunden, wonach wir gesucht haben.

<h2>Und wenn man keine Lösung gefunden hat?</h2>

Wenn man im ersten Durchlauf nichts gefunden hat, ist es beispielsweise sinnvoll, **andere Ausschnitte aus der Fehlermeldung in den Suchtext zu inkludieren**.

Manchmal ist ein Fehler so global, dass er bei verschiedenen Funktionen auftaucht. Daher lohnt es sich manchmal auch, eine __Suche *ohne* den Funktionsnamen__ durchzuführen. Spätestens, wenn man bei der Suche mit allen drei Suchbegriffen nichts gefunden hat, ist es sinnvoll, nur mit <font color ="#649B32">**Programm** + <font color ="#8DA0FF">**Fehlermeldung** zu suchen.

Wir können auch auf **allgemeine <a href="https://www.lifewire.com/google-searches-and-power-tricks-4093009" target="_blank">Tipps zum Suchen im Internet</a>** zurückgreifen, u.a.:

- mit Zitaten exakte Phrasen suchen
  - z.B. *"Fehler in cor.test.default"*
- alternative Begriffe suchen (logische Operatoren)
  - AND ist der Default wenn wir mehrere Wörter eingeben 
  - mit OR (oder |) können wir mehrere Optionen angeben z.B. *"cor.test __|__ cor.test.default"*
- aus- bzw. einschließen von Wörtern
  - vor allem in Kombination mit Zitaten ist dieses Tool sehr nützlich
  - ausschließen z.B. *"Fehler in cor.test.default" __-str()__*"
  - einschließen z.B. *"Fehler in cor.test.default __+r__"*

Ein weiterer Tipp ist es, **in englisch zu suchen**. Die Wahrscheinlichkeit ist hier viel größer, dass man Lösungsvorschläge findet.

Wenn man, wie in diesem Kapitel zu sehen, die Fehlermeldungen auf deutsch ausgegeben bekommt, kann man das folgendermaßen auf englisch ändern:

```{r}
#| eval: false
Sys.setenv(LANGUAGE="en")
```


## Weiterführende Hilfe
\

Ganz generell kann es sehr hilfreich sein, wenn man ein bisschen mit der Funktion "spielt" - etwas wegnimmt oder verändert - und schaut, ob es dann funktioniert oder wie sich die Fehlermeldung verändert. Das hilft meist, das Problem etwas einzugrenzen - und man lernt nebenbei die Funktion besser kennen.

Im <a href="https://www.uni-muenster.de/imperia/md/content/psyifp/ae_holling/r-fehlermeldungen.pdf" target="_blank">**R**-Fehlermeldungsleitfaden der Uni Münster</a> (unter *3. Fehlertextliste*), auf <a href="https://www.r-bloggers.com/common-r-programming-errors-faced-by-beginners/" target="_blank">**R**-bloggers</a> sowie <a href="http://www.programmingr.com/r-error-messages/" target="_blank">PROGRAMMINGR</a> findet man jeweils eine **Übersicht über geläufige Fehlermeldungen** mit Lösungen und teilweise auch Beispielen.

<!--
Mit der **Error-Recovery mit dem Browser** kann man sich die (Unter)Funktionen anzeigen lassen, die, bis der Fehler auftaucht, an der Ausführung des Codes beteiligt waren. So kann man eigenständig in diesen suchen, was falsch gelaufen ist. Dieser Weg ist etwas komplizierter - Vorerfahrung im Umgang mit Programmierung ist hilfreich. Für eine kleine Einführung dazu schaut euch den gleichnamigen Abschnitt dieser <a href="https://de.wikibooks.org/wiki/GNU_R:_Finden_von_Programmfehlern_und_Debugging" target="_blank">Seite</a> an.

Wenn man beispielsweise ein Modell fitten möchte und Fehlermeldungen erwartet, diese die Ausführung des Skripts aber nicht anhalten sollen, kann man u.a. `try()` und `tryCatch()` nutzen. Mit diesen kann man **Fehlermeldungen ignorieren und informativere Fehlermeldungen generieren**. Eine gute Übersicht über das sogenannte *Condition Handling* sowie Debugging Techniques und Tools finden wir <a href="http://adv-r.had.co.nz/Exceptions-Debugging.html" target="_blank">hier</a>.-->

Eine Einführung in **weitere Möglichkeitens des Debuggings** und der dafür in **R** eingebauten Tools finden wir auf <a href="https://adv-r.hadley.nz/debugging.html#introduction-21" target="_blank">Advanced **R**</a>.

## Automatische Suche mit dem Paket **errorist**

Es gibt das Paket **errorist**, mit dem bei jeder Fehler- und Warnmeldung eine **automatische Suche in Google** gestartet wird. Schauen wir uns die Funktionsweise des Pakets am im Abschnitt [Suchen im Internet](#suchen-im-internet) genutzten Beispiels an.  

Zuerst installieren wir das Paket:

```{r}
#| eval: false
install.packages("errorist", dependencies=TRUE)
```

Dann laden wir das Paket und schauen uns an, was bei Ausführung unseres fehlerhaften Codes passiert.

```{r}
#| eval: false
library(errorist)
cor.test(daten[1:2], daten[3:4])
```

Sofort öffnet sich ein neues Fenster im Browser, in dem in Google folgender Text gesucht wird: *"Fehler in cor.test.default(daten[1:2], daten[3:4]) :   'x' muss ein numerischer Vektor sein r programming"*.

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Fehlermeldungen/Bilder/errorist.png")
```

Das Paket übernimmt sozusagen den ersten Schritt bei der [Suche im Internet](#suchen-im-internet), passende Suchbegriffe zu nutzen, für uns. Die Ergebnisse müssen wir nach wie vor alleine filtern, um eine geeignete Lösung zu finden.

Wenn wir uns den Aufbau des Suchtextes anschauen, sehen wir, dass die gesamte Fehlermeldung und *"r programming"* gesucht wird. In unserer manuellen Suche haben wir die gleichen Begriffe genutzt; wir haben lediglich nicht die gesamte Fehlermeldung genutzt, sondern daraus den Namen der *Funktion* und die eigentliche *Fehlermeldung*. Unser manueller Suchtext enthielt folglich weniger Wörter und generiert damit u.U. mehr Ergebnisse.

<aside>Vergleich der Ergebnisse der Suchen für unser Beispiel: manuell 448.000 vs. errorist 17.000.\
Allerdings wurden auch verschiedene Suchmaschinen genutzt (ecosia vs. google).</aside>

Ob ihr das Paket nutzen möchtet oder lieber analog sucht bleibt euch überlassen.


---

Um eine möglichst exakte Replikation der Funktionen zu gewährleisten gibt es im folgenden relevante Angaben zum System (****R**-Version**, **Betriebssystem**, **geladene Pakete mit Angaben zur Version**), mit welchem diese Seite erstellt wurde.

```{r}
sessionInfo()
```

Für Informationen zur Interpretation dieses Outputs schaut auch den Abschnitt [Replizierbarkeit von Analysen](Pakete.qmd#replizierbarkeit-von-analysen) des Kapitels zu Paketen an.








