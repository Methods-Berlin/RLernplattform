# R Markdown

```{r}
#| label: weiteres material
#| echo: false
# http://md.psych.bio.uni-goettingen.de/mv/unit/rmd/rmd.html !!!!!!!!!!!!!!!!!!!
# https://rmarkdown.rstudio.com/lesson-2.html !!!!!!!!!!!!
```

Mit R Markdown <font size="2">(Endung .Rmd)</font> können wir R Code <font size="2">(z.B. für Datenanalyse und -visualisierung)</font> und Text in einem Dokument verbinden. Dabei dient das R Markdown als "Bauplan" für das finale Output-Dokument <font size="2">(z.B. html, pdf oder Word)</font>. 

<aside>Beispielsweise sind alle Inhalte der R Lernplattform mit R Markdown erstellt worden.</aside>

*<span class="highlight">Was ist Markdown?*\
Markdown ist eine Auszeichnungsprache <font size="2">(markup language)</font>. Diese werden für Formatierung und Gliederung von Text genutzt. Weitere Auszeichnungsprachen wie YAML und LaTex, die wir uns später noch genauer anschauen werden, können auch in R Markdown integriert werden.

*<span class="highlight">Warum R Markdown?*\
Wir können R Markdown nicht nur nutzen, um schöne Zusammenfassungen für R Übungen zu schreiben. Wir können ganz einfach Tabellen <font size="2">(z.B. Korrelationstabellen oder Ergebnistabellen für eine ANOVA)</font> oder Grafiken in R erstellen und diese dann in unsere Abschlussarbeit übernehmen^[Wir können die Tabellen und Grafiken z.B. aus einem Word Dokument, welches wir mit R Markdown erstellt haben, rauskopieren und in das Word Dokument einfügen, in welchem wir unsere Arbeit schreiben. Wir können aber auch direkt unsere Arbeit in einem R Markdown Dokument schreiben (und daraus ein Word Dokument o.ö. erstellen).]. So entfällt das lästige händische Erstellen der Tabellen, bei dem sich häufig Flüchtigkeitsfehler einschleichen. 

Im Rahmen dieses Kapitels lernen wir, wie wir R Markdown Dokumente erstellen und verändern können, welche Möglichkeiten es gibt, R Code zu integrieren und wie wir Text gestalten können. 

> *__Achtung__*: Wenn nicht anders vermerkt, gelten alle vorgestellten Inhalte in diesem Kapitel zu Text- und Codebarbeitung für die Outputformate pdf, Word und html.

Bevor es los gehen kann müssen wir zuerst das Paket **rmarkdown** installieren, um R Markdown Dokumente erstellen zu können

```{r}
#| eval: false
install.packages("rmarkdown")
```


## Neues R Markdown Dokument anlegen

Nachfolgend sehen wir, wie wir ein neues R Markdown Dokument <font size="2">(Rmd)</font> anlegen können.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/1.png")
```

Wir können zwischen verschiedenen Outputformaten, u.a. html, pdf und Word, wählen.

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/2.png")
```

<aside>**html** (hypertext markup language) ist auch eine Auszeichnungsprache und die Basis von Inhalten im Internet. Unser Webbrowser (z.B. Firefox, Chrome, Safari) stellt die Inhalte des html dar. Die Inhalte der Lernplattform sind ebenfalls html Dokumente.</aside>

So sieht das neu geöffnete <span class="highlight">Rmd aus.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/3.png")
```

<aside>\
Hier wurde als Outputformat **html** festgelegt. Das sehen wir ganz oben in `output: html_document`.</aside>

Mit dem <span class="highlight">Knit-Button können wir unser <span class="highlight">Output-Dokument erstellen. 

Alternativ können wir zum Knitten einen Kurzbefehl nutzen:

- Windows: <span class="keybord">shift + <span class="keybord">ctrl + <span class="keybord">K
- Mac: <span class="keybord">shift + <span class="keybord">cmd + <span class="keybord">K

Für die Outputformate html und pdf bekommen wir in einem neuen Fenster in R eine Vorschau davon. Für Word Dokumente öffnet sich (ggf.) Microsoft Word.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/vorschau.png")
```

<aside>\
\
html</aside>

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/pdf.png")
```

<aside>\
\
pdf</aside>

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/word.png")
```

<aside>\
\
Word

Dies ist nur die erste Seite des Word Dokuments. Die anderen Inhalte sind auf die zweite Seite gerutscht.</aside>

### YAML

Gehen wir nochmal einen Schritt zurück und schauen uns das Rmd genauer an. Der Code ganz oben im Dokument ist der <span class="highlight">YAML Header. In diesem legen wir **globale Dokument-Optionen** fest. Nachfolgend sehen wir einige.

```{r}
#| out.width: 250px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Markdown/Bilder/4.png")
```

> *__Achtung__*: Standardmäßig steht hier `output: html-document` <font size="2">(bzw. `output: pdf_document` oder `output: word_document`)</font> hintereinander in einer Zeile. Um weitere YAML Optionen ergänzen zu können, müssen wir `html_document` <font size="2">(bzw. `pdf_document` oder `word_document`)</font> in eine neue Zeile schreiben und einen Doppelpunkt dahinter ergänzen. Die YAML Optionen kommen jeweils auch in eine eigene Zeile.

Mit `toc: true` können wir eine Gliederung <font size="2">(table of contents)</font> einfügen.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/toc.png")
```

Diese können wir permanent anzeigen lassen, sodass sie trotz Scrollen immer an der gleichen Stelle <font size="2">(links)</font> bleibt. Dazu ergänzen wir `toc_float: true`.

> *__Achtung__*: Diese Option funktioniert nur in **html**.

```{r}
#| label: toc float
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/toc float.png")
```

Wir können unsere Überschriften auch automatisch nummerieren lassen indem wir `number_sections: true` nutzen.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/numbered.png")
```

Die Gestaltung können wir mit der Option `theme` anpassen. Hier wurde das Theme *journal* genutzt. <a href="https://www.datadreaming.org/post/r-markdown-theme-gallery/" target="_blank">Hier</a> finden wir eine Übersicht über alle bestehenden Möglichkeiten.

> *__Achtung__*: Diese Option funktioniert nur in **html**.

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/theme.png")
```

Einen **Überblick über bestehende YAML Optionen** finden wir <a href="https://cran.r-project.org/web/packages/ymlthis/vignettes/yaml-fieldguide.html" target="_blank">hier</a>.


## Text

Normaler Text wird in R Markdown einfach geschrieben. Im Gegensatz dazu konnten wir im R Skript nur Anmerkungen machen indem wir ein `#` vor unseren Text gesetzt haben.

Nachfolgend schauen wir uns Möglichkeiten der Gestaltung von Text <font size="2">(d.h. die nutzbaren Auszeichnungssprachen)</font> an. Das sind Markdown, html und LaTex.

Eine kurze Übersicht über Textgestaltung mit Markdown können wir auch in RStudio angezeigt bekommen, wenn wir in der oberen Taskleiste in RStudio auf **Help** und dann auf **Markdown Quick Reference** klicken.

<!-- ```{r, out.width = "800px", echo=FALSE, fig.align='center'} -->
<!-- knitr::include_graphics("figures/Markdown/Bilder/alt/Markdown.png") -->
<!-- ``` -->


### Überschriften

Um Überschriften zu setzen, schreiben wir ein bzw. mehrere **#** an den Anfang einer Zeile. Die Überschrift wird dann im Rmd <font color="#431CFF">farblich</font> hervorgehoben. Je mehr # wir setzen, desto kleiner wird die Überschrift. Wie die einzelnen Überschriften aussehen, hängt von unserem Design <font size="2">(`theme` im YAML Header oder Template)</font> ab.

<aside><font color="grey">\
Markdown</font></aside>

```{r}
#| label: headers 1
#| out.width: 175px
#| echo: false
knitr::include_graphics("figures/Markdown/Bilder/headers 1.png")
```

```{r}
#| label: headers 2
#| out.width: 100px
#| echo: false
knitr::include_graphics("figures/Markdown/Bilder/headers 2.png")
```

<aside>Die Überschriften erscheinen auch in der Gliederung, wenn wir im YAML Header eine festgelegt haben (`toc: true`). Mit der Option `toc_depth` können wir festlegen, bis zu welcher Stufe die Überschriften inkludiert werden sollen.</aside>

> *__Achtung__*: </i>Im R-Skript konnten wir # zum <span class="highlight">Kommentieren nutzen. Das funktioniert hier auch, aber nur in den Code Chunks. Um Textpassagen auszukommentieren, können wir den html-Kommentar-Tag `<!-- -->` nutzen. Mit folgendem Kurzbefehl können wir sowohl Text als auch Code auskommentieren <font size="2">(funktioniert in html und pdf)</font>:

- Windows/Linux: <span class="keybord">ctrl + <span class="keybord">shift + <span class="keybord">C
- Mac: <span class="keybord">cmd + <span class="keybord">shift + <span class="keybord">C

### Hervorhebung

Wir können unseren Text auch fett und kursiv schreiben.

<aside><font color="grey">\
Markdown</font></aside>

```{r}
#| label: hervor 1
#| out.width: 250px
#| echo: false
knitr::include_graphics("figures/Markdown/Bilder/hervor 1.png")
```

```{r}
#| label: hervor 2
#| out.width: 150px
#| echo: false
knitr::include_graphics("figures/Markdown/Bilder/hervor 2.png")
```

Es gibt zwei verschiedenen Optionen (* oder \_) damit wir beide kombinieren können, d.h. fett und kursiv schreiben können. Dabei ist Reihenfolge (ob zuerst fett oder kursiv) egal. Wir müssen nur darauf achten, dass das Zeichen, welches zuletzt eingefügt wurde, auch zuerst beendet wird (z.B. `**_eine Möglichkeit_**`).


### Zeilenumbruch

```{r}
#| echo: false
# https://gist.github.com/shaunlebron/746476e6e7a4d698b373
# am besten wohl \ nutzen
```

Es gibt mehrere Möglichkeiten, einen Zeilenumbruch herbeizuführen. Entweder wir machen *mindestens* zwei **Leerzeichen** ans Ende einer Zeile oder wir nutzen einen **Backslash** (\\).

<aside><font color="grey">\
Markdown</font></aside>

<!-- ## Listen -->

<!-- ```{r, eval=FALSE} -->

<!-- ``` -->

<!-- nummeriert, nicht nummeriert -->

<!-- ## Fußnoten -->

<!-- ## Blocktext -->

<!-- ## Hochgestellt und tiefgestellter Text -->


### Verlinkung

Wir können in unserem Output-Dokument auch auf **externe (Web-)Quellen** verlinken. Dazu nutzen wir `[verlinkter Text](http://example.com)`. 

Wenn unser Output-Dokument ein <span class="highlight">html ist, ist es benutzerfreundlicher, wenn sie die Webseite in einem neuen Fenster öffnet. Dazu nutzen wir den html Tag `<a href="http://example.com" target="_blank">verlinkter Text</a>`.

In <span class="highlight">html haben wir zusätzlich die Möglichkeit, **innerhalb eines Dokuments** zu verlinken. Am einfachsten ist es, auf eine Überschrift zu verlinken. Dazu nutzen wir einfach eckige Klammern, in die wir den Namen einer Überschrift schreiben: `[Überschrift]`.


### Formeln

```{r}
#| echo: false
# https://www.calvin.edu/~rpruim/courses/s341/S17/from-class/MathinRmd.html
```

Wir können Formeln und mathematische Symbole mittels <sfont color="grey">LaTex</font> integrieren. Bei der Installation von dem Paket **rmarkdown** wird (standarmäßig) automatisch das Paket **tinytex** heruntergeladen. Das ermöglicht uns die Nutzung von LaTex. Das machen wir mit **$** und speziellem LaTex-Code. Einen guten **Überblick** darüber, wie wir wichtige mathematische Symbole in LaTex schreiben, gibt uns diese <a href="https://www.caam.rice.edu/~heinken/latex/symbols.pdf" target="_blank">Seite</a>.

Um Formeln **im Fließtext** zu schreiben <font size="2">(sog. Inline Formeln)</font>, nutzen wir einfache Dollarzeichen z.B. `$\alpha=0.05$` wird zu $\alpha=0.05$.

Um Formeln als (zentrierten) **Blocksatz** zu schreiben nutzen wir doppelte Dollarzeichen z.B.  

`$$ \sigma^2= \sum_{i =1}^{n} \frac{(x_i - \bar{x}) ^2}{n-1} $$` wird zu
$$ \sigma^2= \sum _{i =1} ^{n} \frac{(x_i - \bar{x}) ^2} {n-1} $$
> *__Achtung__*: </i>Leerzeichen haben im LaTex Code keinen Einfluss. Sie sind hier nur der Übersichtlichkeit halber eingefügt. Wenn wir in den Formeln Leerzeichen ahben wollen, müssen wir dafür speziellen LaTex Code nutzen.

<!-- ### Textfarbe -->

<!-- ### Textgröße -->

<!-- ### Textausrichtung -->


## R-Code

Nun schauen wir uns an, welche Möglichkeiten es gibt, R-Code und/oder deren Outputs in unser Dokument zu integrieren.

### Code Chunk

Allen Code, denn wir sonst in ein R-Skript geschrieben haben, und der dann in der Konsole ausgeführt wurde (und ggf. im Viewer angezeigt wurde, d.h. Plots), schreiben wir in sogenannte Code Chunks. 

Wir können Code Chunks einfügen indem wir auf **Insert** > **R** klicken ...

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/insert chunk.png")
```

... oder einen Kurzbefehl nutzen:

- Windows: <span class="keybord">ctrl + <span class="keybord">alt + <span class="keybord">I
- Mac: <span class="keybord">alt + <span class="keybord">cmd + <span class="keybord">I

\

Im Rmd sind die Code Chunks (in der Standardeinstellung) grau hinterlegt. 

```{r}
#| out.width: 500px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Markdown/Bilder/chunk.png")
```

Wenn wir auf den Pfeil ganz rechts klicken, können wir den Code in dem Chunk ausführen. Darunter erscheint ggf. der Output des Codes.

Zum Ausführen des Code Chunks gibt es können wir auch einen Kurzbefehl nutzen:

- Windows: <span class="keybord">shift + <span class="keybord">ctrl + <span class="keybord">Enter
- Mac: <span class="keybord">shift + <span class="keybord">cmd + <span class="keybord">Enter

\

> *__Achtung__*: Wenn wir beim Knitten Fehlermeldungen angezeigt bekommen, die auf den Code zurückzuführen sind, sollten wir diesen erstmal in einem "normalen" R-Skript ausführen. So können wir schauen, ob das Problem direkt im Code oder in der Einbettung in R Markdown liegt.

Im Output-Dokument werden standarmäßig auch der Code und ggf. der Output angezeigt.

```{r}
1+2+3
vektor <- c(1, 2, 3)
```

```{r}
vektor
mean(vektor)
```

Es gibt Optionen zur Einstellung des Verhaltens der Code Chunks, die wir oben im Code Chunk innerhalb der geschweiften Klammern `{r, ...}` festlegen. Zwei davon werden wir häufiger brauchen: `echo` und `eval`. 

Mit `echo` legen wir fest, ob wir den Code im Output-Dokument **anzeigen** wollen (`{r, echo=TRUE}`) oder nicht (`{r, echo=FALSE}`). Mit `eval` legen wir fest, ob wir den Code **ausführen** wollen (`{r, eval=TRUE}`) oder nicht (`{r, eval=FALSE}`).

Es gibt auch die Möglichkeit, **globale Optionen** für das Verhalten der Chunks festzulegen. Diese werden auf *jeden* Code Chunk angewendet (außer wenn wir in einem Code Chunk eine andere Option spezifizieren) und verhindern dadurch überflüssige Wiederholungen. Globale Optionen legen wir mit `knitr::opts_chunk$set(...)` fest. Die Funktion kommt direkt in den Code Chunk (und nicht wie bei den Chunk-spezifischen Optionen in `{r}`).

```{r}
#| label: global chunk
#| out.width: 650px
#| echo: false
#| fig.align: left
knitr::include_graphics("figures/Markdown/Bilder/global chunk.png")
```

<font size="2">`include=FALSE` führt den Code aus, zeigt den Output des Codes aber nicht im Output-Dokument an. Das ist eine kürzere Alternative zu `{r, echo=FALSE, eval=TRUE}`, wenn der Output aus Zeichen besteht (z.B. das Ergebnis einer Rechnung; der Inhalt eines Objektes) bzw. `{r, echo=FALSE, fig.show='hide'}` wenn der Output eine Grafik ist.</font>

Code Chunks können auch benannt werden, indem in den geschweiften Klammern nach einem Leerzeichen hinter dem r der gewünschte Name eingetragen wird, z.b. `{r, ...}` für den Namen setup. Das hilft uns bei der Orientierung, weil wir die Namen in der **Dokumentübersicht** in RStudio angezeigt bekommen. Wir müssen allerdings darauf achten, denselben Namen nicht mehrmals zuzuweisen. Sonst bekommen wir eine Fehlermeldung.

<aside>Eigentlich benennen wir einen Chunk mit einem Tag: <span class="code">{r **label=**setup, ...}. Diesen können wir aber weglassen, solange wir den Namen an die erste Stelle schreiben.</aside>

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/overview.png")
```


### Inline Code

Wenn es sich bei dem Output (von Code) um Zeichen handelt <font size="2">(und nicht um z.B. Tabellen und Grafiken)</font>, können wir diesen auch direkt in den Fließtext integrieren. Dazu nutzen wir <img src="figures/Markdown/Bilder/r.png" style=" width:6.5%; position: absolute;"/>.

Wir können damit z.B. Inhalte eines Objektes oder das Ergebnis einer (mathematischen) Funktion (ohne den Code) ausgeben lassen. Der Output wird außerdem so formatiert wie der Fließtext.

Im vorhergehenden Abschnitt haben wir beispielsweise das Objekt `vektor` in einem Code Chunk definiert. Dessen Inhalte können wir mit <img src="figures/Markdown/Bilder/r vektor.png" style=" width:13%; transform: translate(0%, 27%);"/> ausgeben lassen: `r vektor`

Wir können auch den Mittelwert von `vektor` berechnen mit <img src="figures/Markdown/Bilder/r mean vektor.png" style=" width:20%; transform: translate(0%, 25%);"/>: `r mean(vektor)` 

Nur mit den <img src="figures/Markdown/Bilder/hervorheben.png" style=" width:8%; transform: translate(0%, 27%);"/> (ohne r) können wir außerdem Text `hervorheben`.

### Grafiken, Bilder und Tabellen

Wir können mit **R-Code in den Code Chunks** außerdem auch Grafiken und Tabellen erstellen und ausgeben, sowie auch Bilder, die nicht im Rmd erstellt wurden, anzeigen.

Bei <span class="highlight">Grafiken müssen wir nichts weiter beachten. Wir können denselben R-Code nutzen wie auch in einem R-Skript <font size="2">(.R)</font>.

Wenn wir lokal gespeicherte <span class="highlight">Bilder integrieren wollen, können wir die Funktion <span class="code">include_graphics("dateipfad") aus dem Paket **knitr** nutzen. Dieses wurde (standardmäßig) automatisch heruntergeladen, als wir rmarkdown installiert haben.

<aside>\
**knitr** ist das Paket, welches unseren R-Code im Rmd ausführt.</aside>


```{r}
#| eval: false
library(knitr)
include_graphics("dateipfad")
```


```{r}
#| echo: false
# https://haozhu233.github.io/kableExtra/awesome_table_in_html.html#save_html_table_directly
```

<!-- https://yihui.org/knitr/options/ unter Plots; Problem mit out.width und .heigth und in, cm und %; daher nur px -->

Schauen wir uns noch **Code Chunk Optionen** an, die wir **für Grafiken _und_ Bilder** nutzen können. Diese schreiben wir wieder oben in den Code Chunk in `{r, ...}`.

Mit `out.width` <font size="2">(Breite)</font> und `out.height` <font size="2">(Höhe)</font> können wir die Größe der Abbildungen im Outputdokument kontrollieren. Wir nehmen dafür am besten **'...px'** <font size="2">(pixel)</font>. Wenn wir wollen, dass das Seitenverhältnis beibehalten wird, sollten wir immer nur die Breite *oder* die Höhe ändern. 

<aside>Beispiel:\
`{r, out.width='300px'}`</aside>

Mit `fig.align` können wir die Ausrichtung beeinflussen. Gültige Optionen sind: `'left'`, `'right'` and `'center'`.

<aside>Beispiel:\
`{r, fig.align='center'}`</aside>

Um <span class="highlight">Tabellen zu erstellen, gibt es verschiedene Funktionen (die nur in Rmd funktionieren). Wir schauen uns im Folgenden eine an (und zwar dieselbe, die auch für die Inhalte der R-Lernplattform genutzt wird).

<!-- <aside>Man kann die Darstellung von Tabellen auch im YAML Header beeinflussen; das schauen wir uns aber nicht an.</aside> -->

Zuerst benötigen wir einen Beispieldatensatz. Wir nutzen den Datensatz **women**, der im Basispaket **datasets** enthalten ist und den wir mit der Funktion `data()` in unser Environment bekommen.

```{r}
data("women")
women
```

So sieht es aus, wenn wir den Datensatz einfach ausgeben. Schönere Tabellen erhalten wir mit der Funktion `kable()` aus dem Paket **kableExtra**.

```{r}
#| eval: false
install.packages("kableExtra")
library(kableExtra)
kable(women)
```

```{r}
#| echo: !expr F
library(kableExtra)
kable(women)
```

<aside>\
\
Die gelbe Hintergrundfarbe sowie die grüne Schriftfarbe, die erscheinen, wenn man mit der Maus über die Zeilen geht, sind zusätzlich eingestellt für diese Seite. Wenn ihr `kable()` bei euch ausführt, ist das nicht enthalten.</aside>

Es gibt noch diverse weitere Optionen, Tabellen zu verschönern. Eine ausführliche Dokumentation dazu gibt es auf
 <a href="https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html" target="_blank">dieser Seite</a>.


## Weiterführend

### Templates

Templates <font size="2">(Vorlagen)</font> besitzen ein vorgefertigtes Design und ggf. sogar weitere Funktionalitäten für unser Output-Dokument.

Wenn wir **Templates** nutzen, sind in diesen ggf. nicht alle bzw. noch zusätzliche YAML Optionen nutzbar.

Wir wollen nun noch zwei Templates vorstellen, die für Projektdokumentation bzw. Veröffentlichungen hilfreich sein können. Für beide müssen wir jeweils ein zusätzliches Paket herunterladen.

Nach der Installation der Pakete finden wir die Templates hier:

```{r}
#| out.width: 800px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/1.png")
```

```{r}
#| out.width: 400px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/template.png")
```


#### distill

Mit dem Template **Distill Article** aus dem Paket **distill** können wir <span class="highlight">html Dokumente erstellen. 

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/distill.png")
```

Die Inhalte der R Lernplattform basieren auch auf diesem Template. Allerdings wurden einige Designänderungen vorgenommen und zusätzliche Funktionen eingefügt.

```{r}
#| eval: false
install.packages("distill")
```

In diesem haben wir u.a. folgende zusätzliche (bzw. geänderte) Funktionalitäten:

- Seitennotizen <font size="2">(am rechten Rand)</font>
- Bilder und Grafiken können über die Seitenränder hinaus gehen <font size="2">(siehe Beispiel unten)</font>
- Fußnoten werden angezeigt, wenn man mit der Maus über sie fährt^[wie hier]
- Gliederung (nur) ganz oben im Dokument\
<font size="2">Die YAML Option `toc_float` bewirkt in distill etwas anderes. Mit `true` wird die Gliederung am linken Rand angezeigt, wenn das Fenster, in dem das Outputdokument geöffnet wird (zumeist der Brwoser), größer gleich 1000px ist. Mit `false` wird die Gliederung immer mittig angezeigt.</font>
- Appendix <font size="2">(wenn z.B Fußnoten oder Referenzen eingefügt)</font>

<aside>Seitennotiz</aside>

Eine **ausführliche Dokumentation** zu den Funktionalitäten des Templates und ihrer Nutzung finden wir <a href="https://rstudio.github.io/distill/" target="_blank">hier</a>.

```{r}
#| echo: false
#| column: l-body-outset
#| fig.link: http://methods-berlin.com/de/r-lernplattform/grafiken-ggplot
#| fig.cap: 'Bildquelle: https://psyteachr.github.io/msc-data-skills/images/memes/better_graphs.png'
knitr::include_graphics("figures/Markdown/Bilder/better_graphs.png")
```


#### papaja

Mit dem Paket **papaja** <font size="2">(**P**reparing **APA** **J**ournal **A**rticles)</font> bekommen wir ein Template, um Artikel ganz einfach im APA-Style zu schreiben. Das Outputformat ist <span class="highlight">pdf.

```{r}
#| out.width: 600px
#| echo: false
#| fig.align: center
knitr::include_graphics("figures/Markdown/Bilder/papaja.png")
```

> *__Achtung__*: Bevor wir das Paket herunterladen, müssen wir schauen, ob die folgenden zwei Voraussetzungen erfüllt sind:

- RStudio Version größer gleich 0.98.932
- TeX Distribution <font size="2">(neuer als 2013; Links zu den Tex Distributions sind z.B. auf der Entwicklerseite, welche unten verlinkt ist, zu finden)</font>

<aside>Unsere R Studio Version finden wir z.B. in R Studio unter **Help > About RStudio** heraus.</aside>

Weil das Paket noch nicht über den CRAN Mirror verfügbar ist, müssen wir es über die Github-Seite des Entwicklers herunterladen. Dazu benötigen wir wiederum das Paket **devtools**.

```{r}
#| eval: false
install.packages("devtools")
library(devtools)
install_github("crsh/papaja")
```

In diesem <a href="https://www.youtube.com/watch?v=I_HW5Rraqg8" target="_blank">Video</a> wird die Nutzung des Templates erklärt. 

Wenn wir das kostenlose Literaturverwaltungsprogramm  <a href="https://www.zotero.org/" target="_blank">**Zotero**</a> nutzen, können wir zusätzlich direkt daraus unsere Zitationen importieren. Damit wird auch automatisch eine Bibliographie erstellt. Um Zotero und R Makrdown gemeinsam nutzen zu können, müssen wir das Paket **citr** <font size="2">(in R)</font> sowie die Software <a href="https://retorque.re/zotero-better-bibtex/installation/" target="_blank">**Better BibTex**</a> <font size="2">(auf unserem Rechner)</font> installieren.

```{r}
#| eval: false
# Installation von citr:
install.packages("citr")
# Installation von Better BibTex siehe Link
```

**Weitere Informationen** finden wir auf der <a href="https://github.com/ekothe/papaja" target="_blank">Githubseite</a> des Entwicklers. 


---

<font size="2">Um eine möglichst exakte Replikation der Funktionen zu gewährleisten gibt es im folgenden relevante Angaben zum System (**`R`-Version**, **Betriebssystem**, **geladene Pakete mit Angaben zur Version**), mit welchem diese Seite erstellt wurde.

> *__Achtung__*: Es ist sinnvoll, die nachfolgende Funktion in einen Code Chunk im eigenen Rmd einzubetten.

```{r}
sessionInfo()
```

Für Informationen zur Interpretation dieses Outputs schaut auch den Abschnitt [Replizierbarkeit von Analysen](Pakete.qmd#replizierbarkeit-von-analysen) des Kapitels zu Paketen an.</font>







