# Wide- & Long-Format

```{r}
#| include: false
library(rmarkdown)
library(tidyr)
```

<p style="font-weight:600; font-size:36px">Einleitung</p>

Wenn man wissenschaftliche Fragestellungen untersuchen möchte, benötigt man ein geeignetes Format, in dem die Daten vorliegen. Manchmal stehen die Daten, die man auswerten möchte, aber nicht im "richtigen" Format zur Verfügung. 

Im Wesentlichen gibt es zwei verschiedene Darstellungsformen von Tabellendaten <font size="2">(Datensätzen)</font>: das Wide- und das Long-Format.

Im **Wide**-Format entspricht jede Zeile einer Untersuchungseinheit. So liegen beispielsweise messwiederholte Variablen in *unterschiedlichen Spalten* vor.

<div style="text-align: center"><font size="2">**Beispiel 1 Wide-Format: Messzeitpunkte**</font></div>

```{r}
#| echo: false
library(dplyr)
library(kableExtra)
table_wide <- as.data.frame(matrix(c(1,2,4,5,3,2,1,3), nrow = 2))
colnames(table_wide)<- c("Untersuchungseinheit", "t1", "t2", "t3")

table_wide %>% mutate(
  t1 = cell_spec(t1, background="grey"),
  t2 = cell_spec(t2, background="grey"),
  t3 = cell_spec(t3, background="grey")) %>% 
  kable("html", align="c", escape=FALSE) %>%
  row_spec(1, color="darkred") %>% 
  row_spec(2, color="dodgerblue") %>%
  kable_styling(position="center")
```

<aside>\
<font color="darkred">Untersuchungseinheit 1</font>\
<font color="dodgerblue">Untersuchungseinheit 2</font>\
<span style=" border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: grey !important;" >Messwiederholung</span>\
<span style=" border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: lightgrey !important;" >Rater</span></aside>

<div style="text-align: center"><font size="2">**Beispiel 2 Wide-Format: Rater**</font></div>

```{r}
#| echo: false
table_wide <- as.data.frame(matrix(c(1,2,2,3,1,4,3,2), nrow = 2))
colnames(table_wide)<- c("Untersuchungseinheit", "self", "friend", "parent")

table_wide %>% mutate(
  self = cell_spec(self, background="lightgrey"),
  friend = cell_spec(friend, background="lightgrey"),
  parent = cell_spec(parent, background="lightgrey")) %>% 
  kable("html", align="c", escape=FALSE) %>%
  row_spec(1, color="darkred") %>% 
  row_spec(2, color="dodgerblue") %>%
  kable_styling(position="center")
```


Im **Long**-Format hingegen liegen Messung von einer Untersuchungseinheit in mehreren Zeilen vor. Dabei sind die Werte einer Untersuchungseinheit, die in unterschiedlichen Modi <font size="2">(z.B. Messzeitpunkte, Rater)</font> erhoben wurden, untereinander gelistet. So werden beispielsweise messwiederholte Variablen in *einer Spalte* dargestellt.

<div style="text-align: center"><font size="2">**Beispiel 1 Long-Format: Messzeitpunkte**</font></div>

```{r}
#| echo: false
# options(knitr.kable.NA = '')
Untersuchungseinheit <- c(1,1,1,2,2,2)
Zeitpunkt <- c(1,2,3,1,2,3)
Messung <- c(4,3,1,5,2,3)
table_long <- data.frame(Untersuchungseinheit, Zeitpunkt, Messung)

table_long %>% mutate(Messung = cell_spec(Messung, background="grey")) %>% 
  knitr::kable("html", align="c", escape=FALSE) %>% # escape=FALSE damit html-code geknittet wird
  row_spec(1:3, color="darkred") %>% 
  row_spec(4:6, color="dodgerblue") %>%
  kable_styling(position="center", full_width = FALSE)
```

<div style="text-align: center"><font size="2">**Beispiel 2 Long-Format: Rater**</font></div>

```{r}
#| echo: false
# options(knitr.kable.NA = '')
Untersuchungseinheit <- c(1,1,1,2,2,2)
Rater <- c("self","friend","parent","self","friend","parent")
Messung <- c(2,1,3,3,4,2)
table_long <- data.frame(Untersuchungseinheit, Rater, Messung)

table_long %>% mutate(Messung = cell_spec(Messung, background="lightgrey")) %>% 
  knitr::kable("html", align="c", escape=FALSE) %>% # escape=FALSE damit html-code geknittet wird
  row_spec(1:3, color="darkred") %>% 
  row_spec(4:6, color="dodgerblue") %>%
  kable_styling(position="center", full_width = FALSE)
```

Wir schauen uns zwei Möglichkeiten an, mit denen man Datensätze umformatieren kann: 

- `reshape()` aus dem Standardpaket **stats**
- `gather()` bzw. `spread()` aus dem Paket **tidyr**

<aside>**Standard-** oder auch **Basispakete** sind Pakete, die von Anfang an in <span class ="r">R</span> enthalten sind, ohne dass man sie installieren muss.</aside> 

Wir werden beide Pakete nutzen, um unsere Daten vom Long- ins Wide-Format und vom Wide- ins Long-Format zu überführen. Wir stellen beide Möglichkeiten zum Umformatieren vor, damit jeder ausprobieren kann, mit welcher Funktion sie bzw. er besser arbeiten kann. Während `gather()` und `spread()` manchen Nutzern intuitiver und einfacher erscheinen, werden die Daten mit `reshape()` etwas übersichtlicher dargestellt <font size="2">(z.B. durch Zeilennummerierungen)</font>.

Falls ihr das Paket **tidyr** noch nicht installiert habt, könnt ihr das folgendermaßen tun: `install.packages("tidyr", dependencies = TRUE)`\
\

<details class ="bsp"><summary>Beispieldatensatz für dieses Kapitel</summary>
Im Zuge dieses Kapitels werden wir mit dem Datensatz `ChickWeight` arbeiten, der standardmäßig in <span class ="r">R</span> enthalten ist. Wir laden ihn folgendermaßen herunter:

```{r}
#| eval: false
data(ChickWeight)
```

```{r}
#| echo: false
#| eval: false
# <font size="2"><span style="color:red">**Hinweis:**</span>Wenn ihr den Datensatz nicht in den Workspace laden könnt, könnte das daran liegen, dass dieser nicht in eurer Version des Basis-Pakets **datasets** enthalten ist. Wenn ihr eine aktuellere <span class ="r">R</span>-Version installiert, werden die Basispakete gleichfalls aktualisiert. Wie ihr <span class ="r">R</span> aktualisieren könnt, erfahrt in unserem Abschnitt zur <a href="..." target="_blank">Installation und Aktualisierung</a>.</font>
```

Die Daten stammen aus einem **Längsschnitt**-Experiment, in dem der **Einfluss von verschiedenem Futter auf das Wachstum von Küken** untersucht wurde. 

```{r}
#| echo: false
rmarkdown::paged_table(ChickWeight)
```

Der Datensatz liegt im **Long-Format** vor und enthält vier Variablen. Mehr Informationen zu den Variablen finden wir  [hier](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ChickWeight.html).

- `weight`: Körpergewicht eines Kükens in Gramm
- `Time`: Tage seit der Geburt des Kükens
- `Chick`: Identifikationsnummer des Kükens
- `Diet`: Nummer der Futtergruppe (1, 2, 3, 4)

Von besonderem Interesse für uns ist die Zeitvariable `Time`. Diese werden wir im Folgenden nutzen, um den Datensatz vom Long- ins Wide-Format, und dann wieder zurück ins Long-Format, zu bringen.
</details>

<p style="line-height:10px;"></p>

> *__Achtung__*:  Der Einfachheit halber wird im Folgenden der Begriff **_messwiederholte Variable_** verwendet, wenn von einer Variablen die Rede ist, die mehrfach erhoben wurde (d.h. im Wide-Format in mehreren Spalten und im Long-Format in einer Spalte vorliegt). Im Beispiel zum Wide-Format oben sind demnach die Variablen `t1`, `t2`, `t_3` sowie `self`, `friend` und `parent` messwiederholt. <span class ="ex">In unserem Beispiel-Datensatz (der im Long-Format vorliegt) ist das die Variable `weight`.</span> Gleiches gilt für den Begriff **_Zeitvariable_**, die die verschiedenen Modi der messwiederholten Variablen kodiert. Im Beispiel zum Long-Format oben entspricht diese den Variablen `Zeitpunkt` und `Rater`. <span class ="ex">In unserem Beispiel-Datensatz (der im Long-Format vorliegt) ist das die Variable `Time`.</span>



## Vom Long- ins Wide-Format

Hierbei wird **eine** messwiederholte Variable (`weight`) in Abhängigkeit der Ausprägungen der Zeitvariable (`Time`) in **mehrere** Spalten aufgeteilt.

Im Wide-Format gibt es **mehr Spalten** und **weniger Zeilen** (als im Long-Format). Die Anzahl der Zeilen entspricht der Anzahl der Untersuchungseinheiten.

<aside><span class ="ex">In unserem Datensatz sind die Untersuchungseinheiten Küken.</span></aside>

Sowohl `reshape()` als auch `spread()` benötigen zur Formatierung von Long nach Wide eine **ID-Variable** im Datensatz (auch wenn man diese bei `spread()` nicht an ein Argument übergeben muss). Eine ID-Variable bezeichnet die Untersuchungsobjekte. Im Eingangsbeispiel wäre dies die Variable <span class="code"><span class ="ex">Untersuchungseinheit</span></span>.

### stats: `reshape()`

Mit dem `reshape()`-Befehl kann man Daten sowohl vom Long- ins Wide-Format als auch vom Wide- ins Long-Format bringen.

Bei der Formatierung von Long in Wide sind folgende 5 Argumente wichtig:

- `data`: Name des Datensatzes 
- `v.names`: **messwiederholte Variable**, die im Long-Format in einer Spalte vorliegt und im Wide-Format auf mehrere Spalten ausgedehnt werden soll
- `timevar`: **Zeitvariable**, die im Long-Format die Modi kodiert
- `idvar`: **ID-Variable**, die unterschiedliche Untersuchungseinheiten kodiert
- `direction`: vom Long- ins **Wide**-Format

Zusätzlich kann man mit `drop="Variable"` eine bzw. mit `drop=c("Variable_1", "Variable_2", ..., "Variable_x")` mehrere Variablen aus dem umformatierten Datensatz entfernen.

```{r}
reshape_wide <- reshape(data=ChickWeight, # Name des Datensatzes
                    v.names="weight", 
                      # messwiederholte Variable (in einer Spalte)
                    timevar="Time", 
                      # (bestehende) Zeitvariable
                    idvar="Chick", 
                      # (bestehende) ID-Variable
                    direction="wide") # vom Long- ins Wide-Format
```

```{r}
#| echo: false
rmarkdown::paged_table(reshape_wide)
```

> *__Achtung__*:  <a name="zeilennum"></a> Ganz links sehen wir die "alte" Zeilennummerierung von `ChickWeight`. Die Zeilennummerierung ändert sich in `reshape_wide`, weil alle Beobachtungen einer Untersuchungseinheit zu unterschiedlichen Messzeitpunkten in __einer__ Zeile vorliegen. Das erkennt man auch daran, dass die Zeilennummerierung von `ChickWeight` (meistens) in 12-er Schritten vorliegt und es genau 12 Messzeitpunkte gibt. Da bei einigen Küken weniger als 12 Messzeitpunkte vorhanden sind, gilt das aber nicht für den ganzen Datensatz `reshape_wide`.

### tidyr: `spread()`

Hier sind nur drei Argumente wichtig:

- `data`: Name des Datensatzes
- `key`: **Zeitvariable**, die im Long-Format unterschiedliche Modi kodiert
- `value`: **messwiederholte Variable**, die im Long-Format in einer Spalte vorliegt und im Wide-Format auf mehrere Spalten ausgedehnt werden soll

```{r}
library(tidyr) # Laden des Pakets

spread_wide <-  spread(data=ChickWeight, # Name des Datensatzes
                  key="Time", #  Zeitvariable
                  value="weight") # messwiederholte Variable
```

```{r}
#| echo: false
rmarkdown::paged_table(spread_wide)
```


### Unterschied zwischen `reshape()` und `spread()`

Bei `reshape()` werden Zeilennummerierungen auf Basis des übergebenen Datensatzes erzeugt <font size="2">(siehe <span class ="ex">**[Hinweis](#zeilennum)**</span> im `reshape()`-Abschnitt)</font>.

<div style="text-align: center"><font size="2">**Wide-Format: Argumente von `reshape()` und `spread()` gegenübergestellt**</font></div> 

```{r}
#| echo: false
wf <- matrix(c("data", "v.names", "timevar", "idvar", "data", "value", "key", '*kein explizites Argument,\naber benötigt*'), ncol = 2)
colnames(wf) <- c("reshape", "spread")

knitr::kable(wf, align="c") %>%
  kable_styling(position="center")
```

<aside>Während wir in `reshape()` mit dem Parameter `direction` fetslegen, welches Format wir erstellen wollen, nutzen wir in tidyr *entweder* `spread()` *oder* `gather()`.</aside>

Die **Benennung der Spalten** der messwiederholten Variable unterscheidet sich in den beiden Ansätzen. Während bei `reshape()` eine Kombination aus dem Namen der messwiederholten Variablen und der Ausprägung der Zeitvariablen genutzt wird (z.B. `weight.0`), wird bei `spread()` nur die Ausprägung der Zeitvariablen genutzt <font size="2">(z.B. `0`)</font>.



## Vom Wide- ins Long-Format

Hierbei wird eine messwiederholte Variable (`weight`), die in **mehreren** Spalten vorliegt, zu **einer** Spalte zusammengefasst und es wird eine dazugehörige **Zeitvariable** (`Time`) erstellt.

Im Long-Format gibt es **weniger Spalten** und **mehr Zeilen** (als im Wide-Format). Die Anzahl der Zeilen entspricht **nicht** der Anzahl der Untersuchungseinheiten, sondern der *Anzahl der Untersuchungseinheiten x Anzahl der (jeweiligen) Messwiederholungen*. Deswegen ist es im Long-Format besonders wichtig, eine ID-Variable zu haben, um einzelne Untersuchungseinheiten differenzieren zu können.

<aside><span class ="ex">Zur Erinnerung: In unserem Beispiel sind die Untersuchungseinheiten Küken.</span></aside>

> *__Achtung__*:  Manchmal werden **nicht alle Untersuchungseinheiten zu jedem Zeitpunkt** untersucht.
<span class ="ex">In unserem Datensatz `ChickWeight` ist das der Fall.</span>

Wir können uns folgendermaßen anschauen, wie häufig jede Untersuchungseinheit beobachtet wurde:

```{r}
table(ChickWeight$Chick)
```

<aside>Die **ungeraden** Zeilen (1,3, und 5) zeigen die **ID-Variable** `Chick`; die **geraden** (2,4, und 6) die **Häufigkeit** der Messung.\
<span class ="ex">Küken 18, 16, 15 und 44 wurden weniger als 12 mal untersucht.</span></aside> 

<span class ="ex">Deswegen gibt es auch einen Unterschied zwischen der Anzahl der Zeilen im ursprünglichen Long-Format von `ChickWeight` und den nachfolgend erstellten Long-Formaten des Datensatzes. Im ursprünglichen Long-Format `ChickWeight` werden die Zeilen der Küken, die zu bestimmten Messzeitpunkten __nicht__ beobachtet wurden, weggelassen. Mit `reshape()` und `gather()` werden diese Zeilen erstellt und die Beobachtung der messwiederholten Variable mit `NA` (= fehlender Wert) versehen.</span>


### stats: `reshape()`

Bei der Formatierung von Wide in Long sind folgende 6 Argumente wichtig:

- `data`: Name des Datensatzes
- `varying`: **messwiederholte Variable**, die im Wide-Format auf mehrere Spalten ausgedehnt ist und im Long-Format in einer Spalte vorliegen soll
- `timevar`: **Zeitvariable**, die unterschiedliche Modi kodiert, und die neu im Long-Format erstellt werden soll
- `times`: **Ausprägungen der Zeitvariable**, d.h. die Kodierung der Modi
- `idvar`: **ID-Variable**, die unterschiedliche Untersuchungseinheiten kodiert
- `direction`: vom Wide- ins **Long**-Format

Mit `v.names` kann man die messwiederholte Variable, welche im Wide-Format in mehreren Spalten vorliegt und nun im Long-Format zu einer Spalte zusammengefasst wird, umbenennen. Wenn alle Spaltennamen den gleichen Stamm haben <font size="2"><span class ="ex">(bei uns `weight.0`, `weight.2`, ...)</span></font>, dann wird dieser als Name der zusammengefassten Variable genutzt. Wenn die Spalten unterschiedliche Namen haben, sollte man hier einen gemeinsamen Namen angeben.

Auch hier kann man einzelne Variablen mit `drop="Variable"` bzw. mehrere Variablen mit `drop=c("Variable_1", "Variable_2", ..., "Variable_x")` aus dem umformatierten Datensatz entfernen.

```{r}
reshape_long <- reshape(data=reshape_wide, # Name des Datensatzes
                    varying=3:14, 
                      # messwiederholte Variable (mehrere Spalten) 
                    timevar="Time", 
                      # (neu erstellte) Zeitvariable 
                    times=c(seq(0, 20, 2), 21), 
                      # Ausprägungen von timevar (Messzeitpunkte)
                    idvar="Chick", 
                      # (bestehende) ID-Variable
                    direction="long") # vom Wide- ins Long-Format
```

```{r}
#| echo: false
rmarkdown::paged_table(reshape_long)
```

> *__Achtung__*:  <a name="zeilennum2"></a> Ganz links sehen wir die neue Zeilennummerierung von `reshape_long`. Die Zeilennummerierung hat hier Nachkommastellen <font size="2">(z.B. 1.0)</font>, weil hier ID-Variable und Zeitvariable kombiniert wurden. Die Zahl vor dem Punkt steht für die Untersuchungseinheit <font size="2">(`Chick`)</font>; die Zahl nach dem Komma für den Messzeitpunkt <font size="2">(`Time`)</font>. \

<details><summary class="mtitle q">Was macht `varying=3:14`?</summary><div class="more">

Man kann **bestehende** Variablen auch mit ihren Indizes (d.h. hier: ihren Spaltennamen) ansprechen. Das ist häufig weniger schreibintensiv, als alle Spaltennamen in einem Vektor zu speichern z.B. `varying=c("weight.0", "weight.2", ..., "weight.21")`. So könnte man z.B. auch `idvar=1` anstatt `idvar="Chick"` schreiben.

Mit den Variablen, die man im Rahmen der Umformatierung erst neu erstellt (z.B. `timevar`), geht das aber nicht, da diese noch gar nicht existieren und von daher auch keine Indizes haben.
</div></details>

<p style="line-height:10px;"></p>

<details><summary class ="mtitle q">Wie können wir verschiedene messwiederholte Variablen jeweils zusammenfassen? bzw. Wie nutzen wir `varying=list()` und `v.names`?</summary><div class="more">

Wenn man mehrere Variablen zu den verschiedenen Messzeitpunkten erhoben hat, kann man diese mit `varying=list()` vom Wide- ins Long-Format bringen. Dabei muss man darauf achten, dass alle messwiederholten Variablen die gleiche Anzahl an Spalten besitzen (d.h. alle zu jedem Messzeitpunkt erhoben wurden). 

<span class ="ex">Für unseren Datensatz generieren wir ein fiktives Beispiel, in dem wir die 12 messwiederholten `weight`-Spalten duplizieren und dann jeweils zu einer Variablen zusammenfügen. Deswegen schreiben wir `varying=list(3:14, 15:26)` in `reshape()`.</span>

Zusätzlich kann man die messwiederholten Variablen mit `v.names=c("...", "...")` umbenennen. Das funktioniert auch für einzelne messwiederholte Variablen: Dann benötigt man keinen Namensvektor `c("...", "...")` mehr, sondern nur `v.names="..."`.

<span class ="ex">Wir nennen die zwei fiktiven Variablen in unserem Beispiel `AV_1` und `AV_2`.</span>

```{r}
# messwiderholte Variablen duplizieren:
reshape_dup <- cbind(reshape_wide, reshape_wide[3:14])

reshape_dup_long <- reshape(data=reshape_dup,
                    varying=list(3:14, 15:26), 
                      # zwei messwiederholte Variable ...
                      # ... mit jeweils mehreren Spalten
                    v.names=c("AV_1", "AV_2"),
                      # Benennung der zwei messwiederholten Variablen
                      # optional
                    timevar="Time", 
                    times=c(seq(0, 20, 2), 21),
                      # Ausprägungen von timevar (Messzeitpunkte)
                    idvar="Chick", 
                    direction="long")
```

```{r}
#| echo: false
# mit c(3:14, 15:26) anstatt list(3:14, 15:26) wird 3 zu AV_1, 4 zu AV_2 usw. zugeordnet
```

```{r}
#| echo: false
rmarkdown::paged_table(reshape_dup_long)
```

</div></details>


### tidyr: `gather()`

Hierfür benötigt man 5 Argumente:

- `data`: Name des Datensatzes
- `key`: **Zeitvariable**, die unterschiedliche Modi kodiert und die neu im Long-Format erstellt werden soll
- `value`: **Benennung** der neu zu erstellenden **messwiederholten Variable**
- `...`: **messwiederholte Variable**, die im Wide-Format auf mehrere Spalten ausgedehnt ist und im Long-Format in einer Spalte vorliegen soll
- `factor_key`: ob die neu erstellte Zeitvariable als Faktor (`TRUE`) oder als Character (`FALSE`; Default) gehandhabt werden soll

```{r}
library(tidyr) # Laden des Pakets

gather_long <- gather(data=spread_wide, # Name des Datensatzes
                  key="Time", # (neu erstellte) Zeitvariable 
                  value="weight", # (neu erstellte) messwiederholte Variable 
                  3:14, # messwiederholte Variable (mehrere Spalten) 
                  factor_key=TRUE) # ob die Zeitvariable ein Faktor sein soll
```

```{r}
#| echo: false
rmarkdown::paged_table(gather_long)
```


### Unterschied zwischen `reshape()` und `gather()`

Bei `reshape()` werden Zeilennummerierungen auf Basis des übergebenen Datensatzes erzeugt <font size="2">(siehe [Hinweis](#zeilennum2) im `reshape()`-Abschnitt)</font>.

<div style="text-align: center"><font size="2">**Long-Format: Argumente von `reshape()` und `gather()` gegenübergestellt**</font></div> 
```{r}
#| echo: false
#| fig.align: center
lf <- matrix(c("data", "varying", "timevar", "times", "idvar", "v.names", "drop", " ", "data", "...", "key", " ", " ", "value", " ", "factor_key"), ncol = 2)
colnames(lf) <- c("reshape", "gather")

knitr::kable(lf)  %>%
  kable_styling(position="center")
```

<aside>Das Argument `direction` wurde nicht mit in die Übersicht aufgenommen. Während man bei `reshape()` angeben muss, welches Format man erstellen will, nutzt man in tidyr *entweder* `gather()` *oder* `spread()`.</aside>


Bei `gather()` werden die **Ausprägungen der Zeitvariable** <font size="2">(Modi)</font> so benannt, wie vorher die einzelnen Spalten der messwiederholten Variablen hießen. Wenn wir uns das anschauen wollen, könnten wir einfach `reshape_wide` (anstatt `spread_wide`) mit `gather()` bearbeiten. Im Gegensatz dazu kann man bei `reshape()` mit `times` eine eigene Benennung der Ausprägungen festlegen.

Bei `reshape()` wird mit `idvar` eine **neue ID-Variable** erstellt. Dazu muss ich dem Argument nur einen Namen geben. Wenn es bereits eine ID-Variable gibt, sollte man den Namen dieser angeben, weil ansonsten *noch* eine neue ID-Variable erstellt wird.  

Mit `drop` kann man zusätzlich bestimmte Variablen aus dem neu formatierten Datensatz entfernen.

Bei `gather()` kann man mit mit `factor_key` entscheiden, ob die **neu erstellte Zeitvariable** als Faktor oder als Character behandelt werden sollen. Mit `reshape()` ist der Datentyp immer numerisch.



## Andere Funktionen zum Umformatieren

Es gibt noch andere Funktionen, mit denen man Datensätze vom Long- ins Wide-Format oder umgekehrt umformatieren kann. 

In gewisser Hinsicht sind `pivot_longer()` und `pivot_wider()` aus dem Paket **tidyr** die Nachfolger von `gather()` und `spread()`. Neben der intuitiveren Benennung enthalten sie einige Neuerungen wie z.B. die Möglichkeit, mit mehreren messwiederholten Variablen mit *verschiedenen* Datentypen zu arbeiten <font size="2">(dieses Feature wurde von `melt()` und `dcast()` übernommen)</font>. Außerdem wurde der Support für `gather()` und `spread()` eingestellt, d.h. bestehende Probleme mit diesen beiden Funktionen werden nicht mehr behoben werden. <a href="https://tidyr.tidyverse.org/articles/pivot.html" target="_blank">Hier</a> finden wir eine Vignette, in der die Handhabung von `pivot_longer()` und `pivot_wider()` erklärt wird.

Wenn wir wissen wollen, wie man `melt()` <font size="2">(Wide zu Long)</font> und `dcast()` <font size="2">(Long zu Wide)</font> aus dem Paket **reshape2** nutzt, können wir dafür <a href="http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/" target="_blank">hier</a> nachschauen.

---

<font size="2">Um eine möglichst exakte Replikation der Funktionen zu gewährleisten gibt es im folgenden relevante Angaben zum System (**<span class ="r">R</span>-Version**, **Betriebssystem**, **geladene Pakete mit Angaben zur Version**), mit welchem diese Seite erstellt wurde.

```{r}
sessionInfo()
```

Für Informationen zur Interpretation dieses Outputs schaut auch den Abschnitt [Replizierbarkeit von Analysen][Replizierbarkeit von Analysen] des Kapitels zu Paketen an.
</font>







